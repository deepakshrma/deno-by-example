"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[364],{9320:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=s(7624),o=s(2172);const t={id:"advanced-logger",title:"Building A Super Cool Colorful Logger with Deno fmt module",sidebar_label:"Implementing Logger",description:"Building A Super Cool Colorful Logger with Deno fmt module",keywords:["advanced","CLI","data","file","tools"],image:"https://source.unsplash.com/y02jEX_B0O0/800x450"},i=void 0,l={id:"advanced-logger",title:"Building A Super Cool Colorful Logger with Deno fmt module",description:"Building A Super Cool Colorful Logger with Deno fmt module",source:"@site/docs/advance_logger.md",sourceDirName:".",slug:"/advanced-logger",permalink:"/deno-by-example/advanced-logger",draft:!1,unlisted:!1,editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advance_logger.md",tags:[],version:"current",frontMatter:{id:"advanced-logger",title:"Building A Super Cool Colorful Logger with Deno fmt module",sidebar_label:"Implementing Logger",description:"Building A Super Cool Colorful Logger with Deno fmt module",keywords:["advanced","CLI","data","file","tools"],image:"https://source.unsplash.com/y02jEX_B0O0/800x450"},sidebar:"someSidebar",previous:{title:"Read Line by Line",permalink:"/deno-by-example/advanced-readline"},next:{title:"Run Deno Application on docker",permalink:"/deno-by-example/advanced-run-on-docker"}},a={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Formatted Log in JS",id:"formatted-log-in-js",level:3},{value:"Issues with <code>vargs</code>",id:"issues-with-vargs",level:3},{value:"Introduction to PrintF",id:"introduction-to-printf",level:3},{value:"According to Deno documents",id:"according-to-deno-documents",level:3},{value:"Colors in Log",id:"colors-in-log",level:3},{value:"Now, We have all the basic tools. Let&#39;s finish the Logger implementation",id:"now-we-have-all-the-basic-tools-lets-finish-the-logger-implementation",level:3},{value:"Create a Basic <em>Logger</em> Class",id:"create-a-basic-logger-class",level:3},{value:"Final Touch: Use of log levels",id:"final-touch-use-of-log-levels",level:4}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Logging trace is one of the basic needs of any ",(0,r.jsx)(n.code,{children:"programming language"}),". It does not matter how good your code is unless it is not ",(0,r.jsx)(n.code,{children:"traceable"})," and ",(0,r.jsx)(n.code,{children:"debugable"}),". For debugging, Logging is one of the best tools. It is ",(0,r.jsx)(n.code,{children:"fast"})," and ",(0,r.jsx)(n.code,{children:"easy"})," to follow. If you are working on ",(0,r.jsx)(n.code,{children:"local system"})," This could be your best mate while ",(0,r.jsx)(n.code,{children:"debugging"}),"."]}),"\n",(0,r.jsx)(n.admonition,{title:"NICE QUOTE:",type:"info",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"LOG WELL, LIVE WELL"})})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://cdn-media-1.freecodecamp.org/images/EMv0ZRmR82v5oUZ4ZNllx29LNYgqZoUwjua-",alt:"image "})}),"\n",(0,r.jsxs)(n.p,{children:["Here in this tutorial, I will explain. How you can build a super cool logger with just minimal code ",(0,r.jsx)(n.code,{children:"(a few lines of the code)"}),". That is also without using any third-party tool."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deno:"})," Install Deno if you don't have it ",(0,r.jsx)(n.a,{href:"https://deno.land/#installation",children:"installed"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic-Typescript:"})," ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/basic-types.html",children:"basic-types"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Just like Nodejs/JavaScript. Logging can be done using ",(0,r.jsx)(n.code,{children:"console.log"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Hello World");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Nice! However formatting log message is big pain is javascript. ",(0,r.jsx)(n.code,{children:"console.log"})," partially implements functions like ",(0,r.jsx)(n.code,{children:"printf"})," from ",(0,r.jsx)(n.code,{children:"c++"})," or ",(0,r.jsx)(n.code,{children:"java"}),". But it doesn't support all the features."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"So how we should log formatted messages?"})}),"\n",(0,r.jsx)(n.h3,{id:"formatted-log-in-js",children:"Formatted Log in JS"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Using String template."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"{3}",children:'const name = "Deepak";\nconst salary = 2000;\nconsole.log(`My name is ${name} and my salary is ${salary}$`);\n\n// My name is Deepak and my salary is 2000$\n'})}),"\n",(0,r.jsx)(n.p,{children:"Cool! But we can see for each parameter in the template, we have to give you a constant/variable. It will be hard to create variables just to log something."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Using Vargs in ",(0,r.jsx)(n.code,{children:"console.log"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"{3,7}",children:'const name = "Deepak";\nconst salary = 2000;\nconsole.log(`My name and salary are `, name, salary);\n\n// My name and salary are  Deepak 2000\n\nconst person = { name: "deepak", salary: 2000 };\nconsole.log(`Info: `, person);\n// Info:  { name: \'deepak\', salary: 2000 }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The above statement is valid in javascript. We can pass any number of ",(0,r.jsx)(n.code,{children:"vargs"})," to ",(0,r.jsx)(n.code,{children:"console.log"})," However, we can't arrange the message with variables. This is very useful to print anything just by separating value from comma. But this can not be used for logging something useful."]}),"\n",(0,r.jsxs)(n.h3,{id:"issues-with-vargs",children:["Issues with ",(0,r.jsx)(n.code,{children:"vargs"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Unpredicted implementation"}),"\n",(0,r.jsx)(n.li,{children:"Error-prone"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Let's see by an example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"{3}",children:'const person = { name: "deepak", salary: 2000 };\nconst address = { street: "221B baker street london", zip: 20000 };\nconsole.log("Person info: " + person + " Address: " + address);\n// Person info: [object Object] Address: [object Object]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you try to append the object with ",(0,r.jsx)(n.code,{children:"string"})," it converts to the string which is ",(0,r.jsx)(n.code,{children:"[object Object]"})," for object and appended."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Solution:"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"{3-8,13}",children:'const person = { name: "deepak", salary: 2000 };\nconst address = { street: "221B baker street london", zip: 20000 };\nconsole.log(\n  "Person info: " +\n    JSON.stringify(person) +\n    " Address: " +\n    JSON.stringify(address)\n);\n// Person info: {"name":"deepak","salary":2000} Address: {"street":"221B baker street london","zip":20000}\n\n// Or\n\nconsole.log("Person info: ", person, " Address: ", address);\n// Person info:  { name: \'deepak\', salary: 2000 }  Address:  { street: \'221B baker street london\', zip: 20000 }\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Use Partial printf like feature in ",(0,r.jsx)(n.code,{children:"console.log"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"{3-8}",children:'const person = { name: "deepak", salary: 2000 };\nconst address = { street: "221B baker street london", zip: 20000 };\nconsole.log(\n  "Person info: name: %s salary: %d and Address: street: %s ",\n  person.name,\n  person.salary,\n  address.street\n);\n// Person info: name: deepak salary: 2000 and Address: street: 221B baker street london\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here you can see, ",(0,r.jsx)(n.code,{children:"console.log"})," does support ",(0,r.jsx)(n.code,{children:"printf"})," like functions. However, this is limited until ",(0,r.jsx)(n.code,{children:"%s"})," [",(0,r.jsx)(n.strong,{children:"string"}),"], ",(0,r.jsx)(n.code,{children:"%d"})," [",(0,r.jsx)(n.strong,{children:"number"}),"]. Mozilla does support Precision formatting something like ",(0,r.jsx)(n.code,{children:"%.2f"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"introduction-to-printf",children:"Introduction to PrintF"}),"\n",(0,r.jsxs)(n.p,{children:["Deno is highly inspired by Go. Just like Go, Deno also has ",(0,r.jsx)(n.code,{children:"fmt"})," module in the standard library. This module/package is a combination of multiple sub-modules like ",(0,r.jsx)(n.code,{children:"printf"}),"."]}),"\n",(0,r.jsx)(n.admonition,{title:"Note:",type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"fmt"})," module is still in work-in-progress status according to developers."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Importing printf:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{1}",children:'import { printf } from "https://deno.land/std/fmt/printf.ts";\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition of printf:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export function printf(format: string, ...args: unknown[]): void {\n  const s = sprintf(format, ...args);\n  Deno.stdout.writeSync(new TextEncoder().encode(s));\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"printf"})," takes string and ",(0,r.jsx)(n.code,{children:"vars"})," of unknown. The format is to define what the format of the string will look like. args could be anything according to the format you wanted."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample of printf:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{2}",children:'const person = { name: "deepak", salary: 2000 };\nprintf(`Person Name: "%s" and Salary: %d\\n`, person.name, person.salary);\n\n// Person Name: "deepak" and Salary: 2000\n'})}),"\n",(0,r.jsx)(n.h3,{id:"according-to-deno-documents",children:"According to Deno documents"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The following verbs are supported:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Verb"}),(0,r.jsx)(n.th,{children:"Meaning"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%"})}),(0,r.jsx)(n.td,{children:"print a literal percent"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"t"})}),(0,r.jsxs)(n.td,{children:["evaluate arg as boolean, print ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"b"})}),(0,r.jsx)(n.td,{children:"eval as number, print binary"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"c"})}),(0,r.jsx)(n.td,{children:"eval as number, print character corr. to the codePoint"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"o"})}),(0,r.jsx)(n.td,{children:"eval as number, print octal"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"x X"})}),(0,r.jsx)(n.td,{children:"print as hex (ff FF), treat string as list of bytes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"e E"})}),(0,r.jsx)(n.td,{children:"print number in scientific/exponent format 1.123123e+01"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f F"})}),(0,r.jsx)(n.td,{children:"print number as float with decimal point and no exponent"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"g G"})}),(0,r.jsx)(n.td,{children:"use %e %E or %f %F depending on size of argument"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"s"})}),(0,r.jsx)(n.td,{children:"interpolate string"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),(0,r.jsxs)(n.td,{children:["type of arg, as returned by ",(0,r.jsx)(n.code,{children:"typeof"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"v"})}),(0,r.jsx)(n.td,{children:"value of argument in 'default' format (see below)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"j"})}),(0,r.jsxs)(n.td,{children:["argument as formatted by ",(0,r.jsx)(n.code,{children:"JSON.stringify"})]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Verbs with Width and Precision"})})}),"\n",(0,r.jsx)(n.p,{children:"%9f    width 9, default precision\n%.9f   default width, precision 9\n%8.9f  width 8, precision 9\n%8.f   width 9, precision 0"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample of Width and Precision:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{2}",children:'const person = { name: "deepak", salary: 2000.2 };\nprintf(`Person Name: "%s" and Salary: %9.2f\\n`, person.name, person.salary);\n\n// Person Name: "deepak" and Salary:   2000.20\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can write more complex examples like padding and get the value of the ",(0,r.jsx)(n.code,{children:"vargs"})," passed to ",(0,r.jsx)(n.code,{children:"printf"})," function."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample of Padding:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{5}",children:'const person = { name: "deepak", salary: 2000.2 };\n\n// Padding Zero\n\nprintf(`Salary: %09.2f\\n`, person.salary);\n\n// Salary: 002000.20\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The conversion of ",(0,r.jsx)(n.code,{children:"rgb"})," to ",(0,r.jsx)(n.code,{children:"hex"})," color is so simple."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{4}",children:'const r = 5,\n  g = 255,\n  b = 100;\nprintf("RGB TO HEX: #%02x%02x%02x\\n", r, g, b);\n\n// RGB TO HEX: #05ff64\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["More Complex use index of ",(0,r.jsx)(n.code,{children:"vargs"})," values:"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{3-7}",children:'const person = { name: "deepak", salary: 2000.2 };\n\nprintf(\n  "Person has salary %d, which(%[1]d) is less than average salary %d\\n",\n  person.salary,\n  4000\n);\n\n// Person has salary 2000.2, which(2000.2) is less than average salary 4000\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Read More:",type:"note",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://deno.land/std/fmt",children:"https://deno.land/std/fmt"})})}),"\n",(0,r.jsx)(n.h3,{id:"colors-in-log",children:"Colors in Log"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"THE DOOR IS RED HERE THE WRITER USES THE COLOR TO EXPRESS HIS ANGER"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://pics.me.me/the-door-is-red-here-the-writer-uses-the-color-38911952.png",alt:"colors"})}),"\n",(0,r.jsxs)(n.p,{children:["Another issue with ",(0,r.jsx)(n.code,{children:"console.log"}),", It does not support colors out of the box. We end-up adding libraries like ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/colors",children:"colors"})," in NodeJs. The browser has some additional support for ",(0,r.jsx)(n.code,{children:"css"})," console.log. But that will not work in NodeJs"]}),"\n",(0,r.jsx)(n.admonition,{title:"Read More:",type:"note",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/console",children:"https://developer.mozilla.org/en-US/docs/Web/API/console"})})}),"\n",(0,r.jsx)(n.p,{children:"Thanks to Deno's Colors module. Now we can easily color our life."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Importing colors:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { red, yellow, gray, cyan } from "https://deno.land/std/fmt/colors.ts";\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Note:",type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"colors"})," module also supports rgb colors"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { rgb8, bgRgb8, rgb24 } from "https://deno.land/std/fmt/colors.ts";\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"From Deno source:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Set background color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit */\nexport function bgRgb8(str: string, color: number): string {\n  return run(str, code([48, 5, clampAndTruncate(color)], 49));\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.h3,{id:"now-we-have-all-the-basic-tools-lets-finish-the-logger-implementation",children:"Now, We have all the basic tools. Let's finish the Logger implementation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.memesmonkey.com/images/memesmonkey/19/19d6564114a19af49a8e40e3338adb46.jpeg",alt:"Finish IT"})}),"\n",(0,r.jsxs)(n.h3,{id:"create-a-basic-logger-class",children:["Create a Basic ",(0,r.jsx)(n.em,{children:"Logger"})," Class"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Define interfaces:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{4,6-9}",children:'import { sprintf, printf } from "https://deno.land/std/fmt/printf.ts";\nimport { red, yellow, gray, cyan } from "https://deno.land/std/fmt/colors.ts";\n\ntype LogLevel = 0 | 1 | 2 | 3;\n\ninterface LoggerOptions {\n  level: LogLevel;\n  format?: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create a constructor and define default values for log level and format:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{11,15-16,18-22}",children:'import { sprintf, printf } from "https://deno.land/std/fmt/printf.ts";\nimport { red, yellow, gray, cyan } from "https://deno.land/std/fmt/colors.ts";\n\ntype LogLevel = 0 | 1 | 2 | 3;\n\ninterface LoggerOptions {\n  level: LogLevel;\n  format?: string;\n}\n\nconst initialOptions = { level: 0, format: "%s\\n" };\n\nclass Logger {\n  private _level: LogLevel;\n  private _format: string;\n\n  constructor(options: LoggerOptions = initialOptions as LoggerOptions) {\n    const { level, format } = { ...initialOptions, ...options };\n    this._level = level;\n    this._format = format;\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Define getter setter for level and format:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{3-17}",children:'const initialOptions = { level: 0, format: "%s\\n" };\nclass Logger {\n  private _level: LogLevel;\n  private _format: string;\n  /// rest of the code\n  get level(): LogLevel {\n    return this._level;\n  }\n  set level(_l: LogLevel) {\n    this._level = _l;\n  }\n  get format(): string {\n    return this._format;\n  }\n  set format(_f: string) {\n    this._format = _f;\n  }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Note:",type:"note",children:(0,r.jsx)(n.p,{children:"This is to hide the definition. You can remove setters if you don't want user to modify the values."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Add basic methods:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{6-17}",children:'const initialOptions = { level: 0, format: "%s\\n" };\nclass Logger {\n  private _level: LogLevel;\n  private _format: string;\n  /// rest of the code\n  log(...messages: unknown[]) {\n    printf(gray(sprintf(this.format, ...messages)));\n  }\n  info(...messages: unknown[]) {\n    printf(cyan(sprintf(this.format, ...messages)));\n  }\n  warn(...messages: unknown[]) {\n    printf(yellow(sprintf(this.format, ...messages)));\n  }\n  error(...messages: unknown[]) {\n    printf(red(sprintf(this.format, ...messages)));\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample Run:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Logger } from "./logger.ts";\n\nconst logger = new Logger({ level: 0, format: "Logger: %s" });\nlogger.log("This is log message");\nlogger.info("This is info");\nlogger.warn("This is warn");\nlogger.error("This is error");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/logger_sample_01.png",alt:"sample 1"})}),"\n",(0,r.jsxs)(n.p,{children:["If you notice, I am using ",(0,r.jsx)(n.code,{children:"sprintf"})," before using ",(0,r.jsx)(n.code,{children:"printf"}),". Since I want the full control on the printing message like adding colors and using the dynamic format. I have to use ",(0,r.jsx)(n.code,{children:"sprintf"})," instead of ",(0,r.jsx)(n.code,{children:"printf"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Let's allow the user to modify format at runtime:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{7-10,14-17,21-24,28-31}",children:'const initialOptions = { level: 0, format: "%s\\n" };\nclass Logger {\n  private _level: LogLevel;\n  private _format: string;\n  /// rest of the code\n  log(format: string, ...messages: unknown[]) {\n    if (messages.length === 0) {\n      messages = [format];\n      format = this.format;\n    }\n    printf(gray(sprintf(format, ...messages)));\n  }\n  info(format: string, ...messages: unknown[]) {\n    if (messages.length === 0) {\n      messages = [format];\n      format = this.format;\n    }\n    printf(cyan(sprintf(format, ...messages)));\n  }\n  warn(format: string, ...messages: unknown[]) {\n    if (messages.length === 0) {\n      messages = [format];\n      format = this.format;\n    }\n    printf(yellow(sprintf(format, ...messages)));\n  }\n  error(format: string, ...messages: unknown[]) {\n    if (messages.length === 0) {\n      messages = [format];\n      format = this.format;\n    }\n    printf(red(sprintf(format, ...messages)));\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample Run2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Logger } from "./logger.ts";\n\nconst logger = new Logger({ level: 0, format: "Logger: %s" });\nlogger.log("This is log message");\nlogger.warn("This is warn");\n\nlogger.log(\n  "Overridden Info- Method: //%s %s [response time]: %05f ms",\n  "POST",\n  "https://www.google.com",\n  100\n);\nlogger.error(\n  "Overridden Error- Error: //%s",\n  new Error("This is error").message\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/logger_sample_022.png",alt:"sample 2"})}),"\n",(0,r.jsx)(n.h4,{id:"final-touch-use-of-log-levels",children:"Final Touch: Use of log levels"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"{7}",children:'const initialOptions = { level: 0, format: "%s\\n" };\nclass Logger {\n  private _level: LogLevel;\n  private _format: string;\n  /// rest of the code\n  log(format: string, ...messages: unknown[]) {\n    if (this.level > 0) return;\n\n    if (messages.length === 0) {\n      messages = [format];\n      format = this.format;\n    }\n    printf(gray(sprintf(format, ...messages)));\n  }\n  /// rest of the code\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Final Run:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Logger } from "./logger.ts";\n\nconst logger = new Logger({ level: 0, format: "Logger: %s" });\nlogger.log("This is log message");\nlogger.warn("This is warn");\n\nlogger.log(\n  "Overridden Info- Method: //%s %s [response time]: %05f ms",\n  "POST",\n  "https://www.google.com",\n  100\n);\nlogger.error(\n  "Overridden Error- Error: //%s",\n  new Error("This is error").message\n);\n\n// Change level\n\nlogger.level = 2;\n\n// This will not print\nlogger.log(\n  "Overridden Info- Method: //%s %s [response time]: %05f ms",\n  "POST",\n  "https://www.google.com",\n  100\n);\n\n// This will print\nlogger.error(\n  "Overridden Error- Error: //%s",\n  new Error("This is error").message\n);\n\n// Change default format\nlogger.level = 1;\n\nlogger.format = "This is something new version: v%s";\n\nlogger.info("1.0.1");\nlogger.info("1.0.2");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/logger_sample_03.png",alt:"sample 3"})}),"\n",(0,r.jsx)(n.admonition,{title:"Good Job",type:"info",children:(0,r.jsx)(n.p,{children:"Nice! Well done! We have done it!!"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://sayingimages.com/wp-content/uploads/you-did-good-job-meme.jpg",alt:"good job"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{children:(0,r.jsxs)(n.strong,{children:["The entire implementation of ",(0,r.jsx)(n.code,{children:"Logger class"})," can be found in"]})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/deepakshrma/deno-by-example/blob/master/examples/logger.ts",children:"examples/logger.ts"})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{children:(0,r.jsx)(n.strong,{children:"How to use sample can be found in"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/deepakshrma/deno-by-example/blob/master/examples/advance_logger.ts",children:"examples/advance_logger.ts"})})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["For more examples like this, visit: ",(0,r.jsx)(n.a,{href:"https://decipher.dev/deno-by-example",children:"https://decipher.dev/deno-by-example"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["I hope you like this tutorial. let me know your feedback in the comment. Please support(\ud83d\ude4f\ud83d\ude4f) by subscribing and clapping on ",(0,r.jsx)(n.a,{href:"https://deepak-v.medium.com/",children:"https://deepak-v.medium.com/"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2172:(e,n,s)=>{s.d(n,{I:()=>l,M:()=>i});var r=s(1504);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);