"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[694],{904:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=s(7624),t=s(2172);const o={id:"advanced-jq",title:"Implementing JQ equivalent in Deno",sidebar_label:"Implementing JQ",description:"Implementing JQ equivalent in Deno",keywords:["advanced","JQ","grep","JSON","parser"],image:"https://source.unsplash.com/SYTO3xs06fU/800x450"},r=void 0,i={id:"advanced-jq",title:"Implementing JQ equivalent in Deno",description:"Implementing JQ equivalent in Deno",source:"@site/docs/advance_jq.md",sourceDirName:".",slug:"/advanced-jq",permalink:"/deno-by-example/advanced-jq",draft:!1,unlisted:!1,editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advance_jq.md",tags:[],version:"current",frontMatter:{id:"advanced-jq",title:"Implementing JQ equivalent in Deno",sidebar_label:"Implementing JQ",description:"Implementing JQ equivalent in Deno",keywords:["advanced","JQ","grep","JSON","parser"],image:"https://source.unsplash.com/SYTO3xs06fU/800x450"},sidebar:"someSidebar",previous:{title:"Variables and Constants",permalink:"/deno-by-example/05-variables-constants"},next:{title:"Read Line by Line",permalink:"/deno-by-example/advanced-readline"}},d={},l=[{value:"How to create a stdin",id:"how-to-create-a-stdin",level:2},{value:"How to read stdin in Deno.",id:"how-to-read-stdin-in-deno",level:2},{value:"Parsing JSON",id:"parsing-json",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["jq is like ",(0,a.jsx)(n.code,{children:"sed"})," for JSON data, you can use it to slice and filter and map and transform structured data"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"-- https://stedolan.github.io/jq/"})}),"\n",(0,a.jsx)(n.p,{children:"I am not going to create the entire library here. Instead, I will just give a small demo how you can read STDIN data using Deno and parse it."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://source.unsplash.com/SYTO3xs06fU/800x450",alt:"parser"})}),"\n",(0,a.jsxs)(n.p,{children:["STDIN ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)",children:"Standard input Stream"}),", Standard input is a stream from which a program reads its input data."]}),"\n",(0,a.jsx)(n.h2,{id:"how-to-create-a-stdin",children:"How to create a stdin"}),"\n",(0,a.jsxs)(n.p,{children:["Passing data as stdin is very easy. You can use ",(0,a.jsx)(n.code,{children:"<"})," to pipe data to any program."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'deno run program.ts < file_name.txt\ndeno run programe.ts < echo "data here"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can also pass the output of any program to the other program using pipe",(0,a.jsx)(n.code,{children:"(|)"}),".\n",(0,a.jsx)(n.strong,{children:"Example:"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'cat file_name.txt | deno run program.ts\necho "data here" | deno run programe.ts\n'})}),"\n",(0,a.jsx)(n.h2,{id:"how-to-read-stdin-in-deno",children:"How to read stdin in Deno."}),"\n",(0,a.jsxs)(n.p,{children:["Reading stdin is very similar to reding and stream in Deno. Deno provides core API like ",(0,a.jsx)(n.code,{children:"Deno.read"})," and ",(0,a.jsx)(n.code,{children:"Deno.readAll"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// examples/advance_jq.ts\n\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconsole.log(stdinContent);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Run:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"deno run examples/advance_jq.ts < examples/advance_jq.ts\n"})}),"\n",(0,a.jsxs)(n.p,{children:["When you run this program, This will print some numbers (",(0,a.jsx)(n.code,{children:"Uint8Array"}),"). Like other languages, stream data is buffer data encoded in buffer. To convert we need ",(0,a.jsx)(n.code,{children:"TextDecoder"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// examples/advance_jq.ts\n\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\nconsole.log(response);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Run:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"deno run examples/advance_jq.ts < examples/advance_jq.ts\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can see you file data as output"}),"\n",(0,a.jsx)(n.h2,{id:"parsing-json",children:"Parsing JSON"}),"\n",(0,a.jsx)(n.p,{children:"Parsing JSON and extracting value is a very tedious task. I have written a basic Extract value from an object based on key provided. Code look as below:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const evalReg = /(\\.)|(\\[(\\d)\\])/;\nconst safeEval = (key: string, obj: any) => {\n  let lastKey;\n  let match;\n  do {\n    if (lastKey) {\n      if (match && match[2]) {\n        obj = obj[lastKey][match[3]];\n      } else {\n        obj = obj[lastKey];\n      }\n    }\n    match = evalReg.exec(key);\n    if (!match) {\n      lastKey = key;\n      break;\n    } else {\n      lastKey = key.substr(0, match.index);\n      key = key.slice(!match[3] ? match.index + 1 : match.index + 3);\n    }\n  } while (match);\n  if (lastKey) {\n    obj = obj[lastKey];\n  }\n  return obj;\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here i am using ",(0,a.jsx)(n.code,{children:"RegExp.exec"}),(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",children:"more"})," method to parse the key and extract tokens. This is a very rough sample of what JQ can do. So ",(0,a.jsx)(n.code,{children:"safeEvel"})," code is also small \ud83d\ude01."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"How this method works:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const obj = {\n  id: 1,\n  version: "1.0.1",\n  contributors: ["deepak", "gary"],\n  actor: {\n    name: "Tom Cruise",\n    age: 56,\n    "Born At": "Syracuse, NY",\n    Birthdate: "July 3 1962",\n    movies: ["Top Gun", "Mission: Impossible", "Oblivion"],\n    photo: "https://jsonformatter.org/img/tom-cruise.jpg",\n  },\n};\nconsole.log(JSON.stringify(obj, null, 2));\nconsole.log(safeEval("id", obj));\nconsole.log(safeEval("contributors", obj));\nconsole.log(safeEval("contributors[1]", obj));\nconsole.log(safeEval("actor.movies[2]", obj));\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"OUTPUT:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'1\n[ "deepak", "gary" ]\ngary\nOblivion\n'})}),"\n",(0,a.jsx)(n.p,{children:"As you can see, this is very much what we need. Let's complete the actual demo."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"[Note:]"})," Thanks to Deno ",(0,a.jsx)(n.code,{children:"import"}),", now i can use this file from github directly. I don't need to create another file to import. You can do that. However, I will use network to ",(0,a.jsx)(n.code,{children:"import"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import safeEval from "https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/safe_eval.ts";\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\n\ntry {\n  console.log(safeEval(key, JSON.parse(response)));\n} catch (err) {\n  console.log(response);\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"But wait, from where we will get missing key ??"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://images.unsplash.com/photo-1529247833802-700f53170380?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&h=300&q=80",alt:"alt text"})}),"\n",(0,a.jsx)(n.p,{children:"(c) Photo by Paolo Nicolello on Unsplash"}),"\n",(0,a.jsxs)(n.p,{children:["Deno provides direct access to arguments passed to programs using CLI. We can use ",(0,a.jsx)(n.code,{children:"Deno.args"})," to get all the arguments passed to programs as an Array. Let's use it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import safeEval from "https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/safe_eval.ts";\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\n\nconst [key = ""] = Deno.args;\ntry {\n  console.log(safeEval(key, JSON.parse(response)));\n} catch (err) {\n  console.log(response);\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can create a json(tom.json) and tryout."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'/* tom.json */\n{\n  "id": 1,\n  "version": "1.0.1",\n  "contributors": ["deepak", "gary"],\n  "actor": {\n    "name": "Tom Cruise",\n    "age": 56,\n    "Born At": "Syracuse, NY",\n    "Birthdate": "July 3 1962",\n    "movies": ["Top Gun", "Mission: Impossible", "Oblivion"],\n    "photo": "https://jsonformatter.org/img/tom-cruise.jpg"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Run:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'$ deno run examples/advance_jq.ts "id" < examples/tom.json\n## 1\n\n$ deno run examples/advance_jq.ts "actor.name" < examples/tom.json\n## Tom Cruise\n'})}),"\n",(0,a.jsx)(n.p,{children:"Perfect: Let's try with curl"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -s -k https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/tom.json | deno run  examples/advance_jq.ts "actor.movies[1]"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Output: Mission: Impossible"}),"\n",(0,a.jsx)(n.p,{children:"Nice! Mission: I am possible"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["I hope you like this tutorial. let me know your feedback in the comment. Please support(\ud83d\ude4f\ud83d\ude4f) by subscribing and clapping on ",(0,a.jsx)(n.a,{href:"https://deepak-v.medium.com/",children:"https://deepak-v.medium.com/"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["Read More: ",(0,a.jsx)(n.a,{href:"https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.readAll",children:"Deno.readAll"})]})]})}function p(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},2172:(e,n,s)=>{s.d(n,{I:()=>i,M:()=>r});var a=s(1504);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);