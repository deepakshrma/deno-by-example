"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[676],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,g=m["".concat(i,".").concat(u)]||m[u]||d[u]||r;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3657:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),s=["components"],l={id:"advanced-jq",title:"Implementing JQ equivalent in Deno",sidebar_label:"Implementing JQ",description:"Implementing JQ equivalent in Deno",keywords:["advanced","JQ","grep","JSON","parser"],image:"https://source.unsplash.com/SYTO3xs06fU/800x450"},i=void 0,p={unversionedId:"advanced-jq",id:"advanced-jq",title:"Implementing JQ equivalent in Deno",description:"Implementing JQ equivalent in Deno",source:"@site/docs/advance_jq.md",sourceDirName:".",slug:"/advanced-jq",permalink:"/deno-by-example/advanced-jq",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advance_jq.md",tags:[],version:"current",frontMatter:{id:"advanced-jq",title:"Implementing JQ equivalent in Deno",sidebar_label:"Implementing JQ",description:"Implementing JQ equivalent in Deno",keywords:["advanced","JQ","grep","JSON","parser"],image:"https://source.unsplash.com/SYTO3xs06fU/800x450"},sidebar:"someSidebar",previous:{title:"Variables and Constants",permalink:"/deno-by-example/05-variables-constants"},next:{title:"Read Line by Line",permalink:"/deno-by-example/advanced-readline"}},c={},d=[{value:"How to create a stdin",id:"how-to-create-a-stdin",level:2},{value:"How to read stdin in Deno.",id:"how-to-read-stdin-in-deno",level:2},{value:"Parsing JSON",id:"parsing-json",level:2}],m={toc:d};function u(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"jq is like ",(0,r.kt)("inlineCode",{parentName:"p"},"sed")," for JSON data, you can use it to slice and filter and map and transform structured data"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"-- https://stedolan.github.io/jq/")),(0,r.kt)("p",null,"I am not going to create the entire library here. Instead, I will just give a small demo how you can read STDIN data using Deno and parse it."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://source.unsplash.com/SYTO3xs06fU/800x450",alt:"parser"})),(0,r.kt)("p",null,"STDIN ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)"},"Standard input Stream"),", Standard input is a stream from which a program reads its input data."),(0,r.kt)("h2",{id:"how-to-create-a-stdin"},"How to create a stdin"),(0,r.kt)("p",null,"Passing data as stdin is very easy. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," to pipe data to any program."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'deno run program.ts < file_name.txt\ndeno run programe.ts < echo "data here"\n')),(0,r.kt)("p",null,"You can also pass the output of any program to the other program using pipe",(0,r.kt)("inlineCode",{parentName:"p"},"(|)"),".\n",(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cat file_name.txt | deno run program.ts\necho "data here" | deno run programe.ts\n')),(0,r.kt)("h2",{id:"how-to-read-stdin-in-deno"},"How to read stdin in Deno."),(0,r.kt)("p",null,"Reading stdin is very similar to reding and stream in Deno. Deno provides core API like ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.read")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.readAll")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// examples/advance_jq.ts\n\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconsole.log(stdinContent);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deno run examples/advance_jq.ts < examples/advance_jq.ts\n")),(0,r.kt)("p",null,"When you run this program, This will print some numbers (",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array"),"). Like other languages, stream data is buffer data encoded in buffer. To convert we need ",(0,r.kt)("inlineCode",{parentName:"p"},"TextDecoder"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// examples/advance_jq.ts\n\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\nconsole.log(response);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deno run examples/advance_jq.ts < examples/advance_jq.ts\n")),(0,r.kt)("p",null,"You can see you file data as output"),(0,r.kt)("h2",{id:"parsing-json"},"Parsing JSON"),(0,r.kt)("p",null,"Parsing JSON and extracting value is a very tedious task. I have written a basic Extract value from an object based on key provided. Code look as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const evalReg = /(\\.)|(\\[(\\d)\\])/;\nconst safeEval = (key: string, obj: any) => {\n  let lastKey;\n  let match;\n  do {\n    if (lastKey) {\n      if (match && match[2]) {\n        obj = obj[lastKey][match[3]];\n      } else {\n        obj = obj[lastKey];\n      }\n    }\n    match = evalReg.exec(key);\n    if (!match) {\n      lastKey = key;\n      break;\n    } else {\n      lastKey = key.substr(0, match.index);\n      key = key.slice(!match[3] ? match.index + 1 : match.index + 3);\n    }\n  } while (match);\n  if (lastKey) {\n    obj = obj[lastKey];\n  }\n  return obj;\n};\n")),(0,r.kt)("p",null,"Here i am using ",(0,r.kt)("inlineCode",{parentName:"p"},"RegExp.exec"),(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"},"more")," method to parse the key and extract tokens. This is a very rough sample of what JQ can do. So ",(0,r.kt)("inlineCode",{parentName:"p"},"safeEvel")," code is also small \ud83d\ude01."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How this method works:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const obj = {\n  id: 1,\n  version: "1.0.1",\n  contributors: ["deepak", "gary"],\n  actor: {\n    name: "Tom Cruise",\n    age: 56,\n    "Born At": "Syracuse, NY",\n    Birthdate: "July 3 1962",\n    movies: ["Top Gun", "Mission: Impossible", "Oblivion"],\n    photo: "https://jsonformatter.org/img/tom-cruise.jpg",\n  },\n};\nconsole.log(JSON.stringify(obj, null, 2));\nconsole.log(safeEval("id", obj));\nconsole.log(safeEval("contributors", obj));\nconsole.log(safeEval("contributors[1]", obj));\nconsole.log(safeEval("actor.movies[2]", obj));\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OUTPUT:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'1\n[ "deepak", "gary" ]\ngary\nOblivion\n')),(0,r.kt)("p",null,"As you can see, this is very much what we need. Let's complete the actual demo."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"[Note:]")," Thanks to Deno ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),", now i can use this file from github directly. I don't need to create another file to import. You can do that. However, I will use network to ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import safeEval from "https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/safe_eval.ts";\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\n\ntry {\n  console.log(safeEval(key, JSON.parse(response)));\n} catch (err) {\n  console.log(response);\n}\n')),(0,r.kt)("p",null,"But wait, from where we will get missing key ??"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://images.unsplash.com/photo-1529247833802-700f53170380?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&h=300&q=80",alt:"alt text"})),(0,r.kt)("p",null,"(c) Photo by Paolo Nicolello on Unsplash"),(0,r.kt)("p",null,"Deno provides direct access to arguments passed to programs using CLI. We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.args")," to get all the arguments passed to programs as an Array. Let's use it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import safeEval from "https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/safe_eval.ts";\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\n\nconst [key = ""] = Deno.args;\ntry {\n  console.log(safeEval(key, JSON.parse(response)));\n} catch (err) {\n  console.log(response);\n}\n')),(0,r.kt)("p",null,"You can create a json(tom.json) and tryout."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/* tom.json */\n{\n  "id": 1,\n  "version": "1.0.1",\n  "contributors": ["deepak", "gary"],\n  "actor": {\n    "name": "Tom Cruise",\n    "age": 56,\n    "Born At": "Syracuse, NY",\n    "Birthdate": "July 3 1962",\n    "movies": ["Top Gun", "Mission: Impossible", "Oblivion"],\n    "photo": "https://jsonformatter.org/img/tom-cruise.jpg"\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ deno run examples/advance_jq.ts "id" < examples/tom.json\n## 1\n\n$ deno run examples/advance_jq.ts "actor.name" < examples/tom.json\n## Tom Cruise\n')),(0,r.kt)("p",null,"Perfect: Let's try with curl"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -s -k https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/tom.json | deno run  examples/advance_jq.ts "actor.movies[1]"\n')),(0,r.kt)("p",null,"Output: Mission: Impossible"),(0,r.kt)("p",null,"Nice! Mission: I am possible"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"I hope you like this tutorial. let me know your feedback in the comment. Please support(\ud83d\ude4f\ud83d\ude4f) by subscribing and clapping on ",(0,r.kt)("a",{parentName:"em",href:"https://deepak-v.medium.com/"},"https://deepak-v.medium.com/"),".")),(0,r.kt)("p",null,"Read More: ",(0,r.kt)("a",{parentName:"p",href:"https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.readAll"},"Deno.readAll")))}u.isMDXComponent=!0}}]);