"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[888],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5818:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={id:"02-greet-from-cli",title:"Greet From CLI",description:"Take user input as command line arguments",keywords:["beginner","helloworld","CLI"],image:"https://source.unsplash.com/46T6nVjRc2w/800x450"},u=void 0,c={unversionedId:"02-greet-from-cli",id:"02-greet-from-cli",title:"Greet From CLI",description:"Take user input as command line arguments",source:"@site/docs/02_greet_from_cli.md",sourceDirName:".",slug:"/02-greet-from-cli",permalink:"/deno-by-example/02-greet-from-cli",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/02_greet_from_cli.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"02-greet-from-cli",title:"Greet From CLI",description:"Take user input as command line arguments",keywords:["beginner","helloworld","CLI"],image:"https://source.unsplash.com/46T6nVjRc2w/800x450"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/deno-by-example/getting-started"},next:{title:"Hello World",permalink:"/deno-by-example/01-hello-world"}},s={},m=[{value:"Take user input as command line arguments",id:"take-user-input-as-command-line-arguments",level:2}],p={toc:m};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Taking user input can be difficult task. You can take user input as command line argument or you can read ",(0,a.kt)("inlineCode",{parentName:"p"},"input stream(STDIN)")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://source.unsplash.com/46T6nVjRc2w/800x450",alt:"command line arguments"})),(0,a.kt)("h2",{id:"take-user-input-as-command-line-arguments"},"Take user input as command line arguments"),(0,a.kt)("p",null,"Create file examples/02_greet_from_cli.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const { args } = Deno;\n\ninterface UserInput {\n  name?: string;\n}\n\nfunction main({ name }: UserInput) {\n  console.log(`Hello ${name ? name : "world"}`);\n}\nmain({ name: args[0] });\n')),(0,a.kt)("p",null,"Run Using deno run by passing name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ deno run examples/02_greet_from_cli.ts Deepak\n#[Output] Hello Deepak\n\n$ deno run examples/02_greet_from_cli.ts\n#[Output] Hello World\n")))}d.isMDXComponent=!0}}]);