"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[156],{9580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(7624),o=t(2172);const r={id:"advanced-react-ssr",title:"Build an Isomorphic Application using Deno and React without WebPack",sidebar_label:"Isomorphic App",description:"Create a SSR/Isomorphic app using Deno without webpack",keywords:["deno","isomorphic","ssr","bundle","advanced","server-side-render"],image:"https://source.unsplash.com/mQHEgroKw2k/800x450"},i=void 0,a={id:"advanced-react-ssr",title:"Build an Isomorphic Application using Deno and React without WebPack",description:"Create a SSR/Isomorphic app using Deno without webpack",source:"@site/docs/advanced_react_ssr.md",sourceDirName:".",slug:"/advanced-react-ssr",permalink:"/deno-by-example/advanced-react-ssr",draft:!1,unlisted:!1,editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advanced_react_ssr.md",tags:[],version:"current",frontMatter:{id:"advanced-react-ssr",title:"Build an Isomorphic Application using Deno and React without WebPack",sidebar_label:"Isomorphic App",description:"Create a SSR/Isomorphic app using Deno without webpack",keywords:["deno","isomorphic","ssr","bundle","advanced","server-side-render"],image:"https://source.unsplash.com/mQHEgroKw2k/800x450"},sidebar:"someSidebar",previous:{title:"Build MiniFind CLI",permalink:"/deno-by-example/advanced-cli-minifind"},next:{title:"Lottery Game",permalink:"/deno-by-example/lottery-game"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Set-up",id:"set-up",level:2},{value:"Start with npm init",id:"start-with-npm-init",level:3},{value:"Backend",id:"backend",level:2},{value:"Add React Server Render",id:"add-react-server-render",level:3},{value:"Adding Server Controller- Create Backend APIs",id:"adding-server-controller--create-backend-apis",level:3},{value:"Client Side App",id:"client-side-app",level:2},{value:"Add List Todos to React App",id:"add-list-todos-to-react-app",level:3},{value:"Adding delete functionality on client-side",id:"adding-delete-functionality-on-client-side",level:3},{value:"Final Touch",id:"final-touch",level:2},{value:"Initialize initial state",id:"initialize-initial-state",level:3},{value:"Final Domo",id:"final-domo",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Currently setting up a ",(0,s.jsx)(n.em,{children:"Server Side Render (SSR)"})," application is a pain in ",(0,s.jsx)(n.em,{children:"nodejs"}),". There are many scaffolds available for ",(0,s.jsx)(n.em,{children:"nodejs"}),". But it comes with its own ",(0,s.jsx)(n.em,{children:"tech-depth"})," and ",(0,s.jsx)(n.em,{children:"learning curves"}),". This also includes hidden configurations of ",(0,s.jsx)(n.em,{children:"Webpack"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"All in all, when you give Webpack a chance, your encounter will rarely be a pleasant one."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://memegenerator.net/img/instances/81660209.jpg",alt:"webpack"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Read More"}),": ",(0,s.jsx)(n.a,{href:"https://www.north-47.com/knowledge-base/webpack-the-good-the-bad-and-the-ugly/",children:"https://www.north-47.com/knowledge-base/webpack-the-good-the-bad-and-the-ugly/"})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"According to the"})," ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Isomorphic_JavaScript",children:(0,s.jsx)(n.em,{children:"wiki"})}),(0,s.jsx)(n.em,{children:", An isomorphic JavaScript(also known as"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"Universal JavaScript"})}),(0,s.jsx)(n.em,{children:") is described as JavaScript applications that run both on the client and the server."})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.hardwarezone.com/img/2020/07/tenet.jpg",alt:"tenet"})}),"\n",(0,s.jsxs)(n.p,{children:["If I say, you can build an entire ",(0,s.jsx)(n.strong,{children:"SSR"})," without setting up installing any ",(0,s.jsx)(n.strong,{children:"external nodejs"})," dependency. ",(0,s.jsx)(n.strong,{children:"Would you believe it?"})," I guess ",(0,s.jsx)(n.code,{children:"NO"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["However, In this tutorial, I will explain how to set up a ",(0,s.jsx)(n.em,{children:"simple SSR"})," app without installing a ",(0,s.jsx)(n.em,{children:"single nodejs library"})," or ",(0,s.jsx)(n.em,{children:"bundler"}),". That also including a hydrate react app(",(0,s.jsx)(n.strong,{children:"isomorphic app"}),")."]}),"\n",(0,s.jsx)(n.h2,{id:"set-up",children:"Set-up"}),"\n",(0,s.jsx)(n.h3,{id:"start-with-npm-init",children:"Start with npm init"}),"\n",(0,s.jsxs)(n.p,{children:["Don\u2019t be afraid, To do things differently, we will not install any ",(0,s.jsx)(n.em,{children:"nodejs"})," libraries. However, I still like ",(0,s.jsx)(n.em,{children:"npm"})," as a task runner. So let\u2019s use it. Create a folder ",(0,s.jsx)(n.em,{children:"SSR"})," and init npm ",(0,s.jsx)(n.strong,{children:"package.json"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"md -p examples/ssr\n\ncd examples/ssr\n\n## init npm package\n\nnpm init --y\n"})}),"\n",(0,s.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Add Basic deno server:"})," Create ",(0,s.jsx)(n.code,{children:"server.tsx"})," a file and add below code"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx"',children:'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction handlePage(ctx: any) {\n  try {\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root"><h1>Hello SSR</h1></div>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["We will use ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"oak"})})," module here to create ",(0,s.jsx)(n.em,{children:"Deno"})," server. You can create your own server. For that read my article ",(0,s.jsx)(n.a,{href:"https://decipher.dev/deno-by-example/advanced-routing",children:"Creating Routing/Controller in Deno Server(From Scratch)"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Add below command in ",(0,s.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"{2}",children:'"scripts": {\n    "start": "deno run --allow-net server.ts",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Run:"}),"\nNow we can run the application and verify on ",(0,s.jsx)(n.code,{children:"http://localhost:8000/"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,s.jsx)(n.h3,{id:"add-react-server-render",children:"Add React Server Render"}),"\n",(0,s.jsxs)(n.p,{children:["Now we can run the application. Let us add our first rendering code. For that, we need to ReactJS. Since Deno uses ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",children:"ES Module import"}),", We will use the CDN hosted version of ",(0,s.jsx)(n.strong,{children:"react"})," and ",(0,s.jsx)(n.strong,{children:"react-dom"}),". For that, there is a good CDN provider ",(0,s.jsx)(n.a,{href:"https://jspm.dev/",children:"https://jspm.dev/"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"jspm",type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"jspm"})})," ",(0,s.jsx)(n.em,{children:"provides a module CDN allowing any package from"})," npm ",(0,s.jsx)(n.em,{children:"to be directly loaded in the the browser and other JS environments as a fully"})," optimized ",(0,s.jsx)(n.em,{children:"native JavaScript module."})]})}),"\n",(0,s.jsxs)(n.p,{children:["Now since we are going to write some ",(0,s.jsx)(n.strong,{children:"TSX syntax(typescript JSX)"}),". We have to change the file extension of ",(0,s.jsx)(n.code,{children:"server.ts"})," to ",(0,s.jsx)(n.code,{children:"server.tsx"}),". Let\u2019s do that and update ",(0,s.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mv server.ts server.tsx\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json" {2}',children:'"scripts": {\n    "start": "deno run --allow-net server.tsx",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Create a common dependency ",(0,s.jsx)(n.code,{children:"deps.ts"})," file"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="deps.ts" {3,4,17-19,22,31}',children:'// @deno-types="https://denopkg.com/soremwar/deno_types/react/v16.13.1/react.d.ts"\nimport React from "https://jspm.dev/react@17.0.2";\n// @deno-types="https://denopkg.com/soremwar/deno_types/react-dom/v16.13.1/server.d.ts"\nimport ReactDOMServer from "https://jspm.dev/react-dom@17.0.2/server";\n// @deno-types="https://denopkg.com/soremwar/deno_types/react-dom/v16.13.1/react-dom.d.ts"\nimport ReactDOM from "https://jspm.dev/react-dom@17.0.2";\n\nexport { React, ReactDOM, ReactDOMServer };\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Add below lines in ",(0,s.jsx)(n.code,{children:"server.tsx"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx" {3,4,17-19,22,31}',children:'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nimport { React, ReactDOMServer, ReactDOM } from "./dep.ts";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction App() {\n  return <h1>Hello SSR</h1>;\n}\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(<App />);\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Run the app again. You will see ",(0,s.jsx)(n.strong,{children:"errors"})," on the ",(0,s.jsx)(n.strong,{children:"console"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"TS7026 [ERROR]",type:"danger",children:(0,s.jsxs)(n.p,{children:["TS7026 [ERROR]: JSX element implicitly has type 'any' because no ",(0,s.jsx)(n.strong,{children:"interface 'JSX.IntrinsicElements' exists."}),(0,s.jsx)(n.br,{}),"\n","return ",(0,s.jsx)("h1",{children:"Hello SSR"})]})}),"\n",(0,s.jsxs)(n.p,{children:["This error is due to missing ",(0,s.jsx)(n.strong,{children:"typings"})," to ",(0,s.jsx)(n.strong,{children:"react"}),". Since we do not include ",(0,s.jsx)(n.strong,{children:"types"})," to react. We have to let know the ",(0,s.jsx)(n.strong,{children:"typescript compiler"}),". How it should treat JSX(TSX) syntax."]}),"\n",(0,s.jsxs)(n.p,{children:["To ",(0,s.jsx)(n.strong,{children:"suppress"})," these errors, Add below lines."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx" {3-5}',children:"function App() {\n  return <h1>Hello SSR</h1>;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now run the server again. You can see your first ",(0,s.jsx)(n.code,{children:"React SSR"})," running on the browser. Nice!"]}),"\n",(0,s.jsx)(n.h3,{id:"adding-server-controller--create-backend-apis",children:"Adding Server Controller- Create Backend APIs"}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s move further and start adding a few core features for Server. Let\u2019s add some ",(0,s.jsx)(n.strong,{children:"server-side"})," data for our app. For that, we will include a few routes on ",(0,s.jsx)(n.strong,{children:"Oak Server"}),". ",(0,s.jsx)(n.a,{href:"https://github.com/oakserver/oak",children:"Oak"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx"',children:'const router = new Router();\nrouter.get("/", handlePage);\n\nlet todos: Map<number, any> = new Map();\n\nfunction init() {\n  todos.set(todos.size + 1, { id: Date.now(), task: "build an ssr deno app" });\n  todos.set(todos.size + 1, {\n    id: Date.now(),\n    task: "write blogs on deno ssr",\n  });\n}\ninit();\nrouter\n  .get("/todos", (context) => {\n    context.response.body = Array.from(todos.values());\n  })\n  .get("/todos/:id", (context) => {\n    if (\n      context.params &&\n      context.params.id &&\n      todos.has(Number(context.params.id))\n    ) {\n      context.response.body = todos.get(Number(context.params.id));\n    } else {\n      context.response.status = 404;\n    }\n  })\n  .post("/todos", async (context) => {\n    const body = context.request.body();\n    if (body.type === "json") {\n      const todo = await body.value;\n      todos.set(Date.now(), todo);\n    }\n    context.response.body = { status: "OK" };\n  });\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here in the above code, We have created three routes."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["GET ",(0,s.jsx)(n.code,{children:"/todos/"})," to get a list of the todos"]}),"\n",(0,s.jsxs)(n.li,{children:["GET ",(0,s.jsx)(n.code,{children:"/todos/:id"})," to todo by id"]}),"\n",(0,s.jsxs)(n.li,{children:["POST ",(0,s.jsx)(n.code,{children:"/todos/"})," create a new todo"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"function init()"})," to create some initial dummy todos. You can use postman to try-out get and post data."]}),"\n",(0,s.jsx)(n.h2,{id:"client-side-app",children:"Client Side App"}),"\n",(0,s.jsx)(n.h3,{id:"add-list-todos-to-react-app",children:"Add List Todos to React App"}),"\n",(0,s.jsx)(n.p,{children:"Since now we have API to create todos and consume todos. Let\u2019s list down all this on our react app. For that add the below-mentioned code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx"',children:'function App() {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={Array.from(todos.values())} />\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface Todo {\n  task: string;\n}\ninterface ListTodos{\n  items: Todo[]\n}\nfunction ListTodos({ items = [] }: ListTodos) {\n  return (\n    <div>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          return (\n            <li key={index} className="list-group-item">\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(<App />);\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n  </body>\n  </html>`;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Update all the changes and ",(0,s.jsx)(n.em,{children:"run the app"}),". You will see a ",(0,s.jsx)(n.em,{children:"list of Todos"})," containing two rows of initial data. You can use curl post data to route ",(0,s.jsx)(n.code,{children:"POST/todos/"})," to create new records. Once you add a post, ",(0,s.jsx)(n.em,{children:"refresh"})," the page, You will see added new post data."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="post data using curl"',children:'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"task":"Create postman script"}\' \\\n  http://localhost:8000/todos/\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"bootstrap",type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"If you noticed, I have added basic"})," ",(0,s.jsx)(n.a,{href:"https://getbootstrap.com/",children:(0,s.jsx)(n.em,{children:"bootstrap"})})," ",(0,s.jsx)(n.em,{children:"to make UI nicer. You can use some other CSS library."})]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/todo_app_1.png",alt:"todo png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Tada! Now you have running the SSR app. You can replace the ",(0,s.jsx)(n.strong,{children:"in-memory"})," todos store to any persistent database. The result will be the same."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Now time to add some ",(0,s.jsx)(n.strong,{children:"interactive"})," behavior in Our react app(",(0,s.jsx)(n.code,{children:"client-side"}),"). But before doing that, let\u2019s move our react code to some separate file ",(0,s.jsx)(n.code,{children:"app.tsx"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Create a file ",(0,s.jsx)(n.code,{children:"app.tsx"}),":"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="app.tsx"',children:'import { React } from "./dep.ts";\n/*\n// enable in case of old react module\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [key: string]: any;\n    }\n  }\n}\n*/\n\ninterface AppProps {\n  todos?: Todo[];\n}\ninterface Todo {\n  task: string;\n}\n\nfunction App({ todos = [] }: AppProps) {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={todos} />\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface ListTodos {\n  items: Todo[];\n}\nfunction ListTodos({ items = [] }: ListTodos) {\n  return (\n    <div>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          return (\n            <li key={index} className="list-group-item">\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\nexport default App;\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Notice the change in the ",(0,s.jsx)(n.em,{children:"App"})," component. Since we do not have direct access to ",(0,s.jsx)(n.strong,{children:"todos"})," now, We need to pass ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"data as props"})})," while rendering it. Corresponding changes have been done for ",(0,s.jsx)(n.strong,{children:"ListTodos"}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx" {3,10}',children:'import { React, ReactDOMServer, ReactDOM } from "./dep.ts";\n\nimport App from "./app.tsx";\n\n/// rest of the code\n\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={Array.from(todos.values())} /> // change here to pass todos as props\n    );\n\n  // rest of the code\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run the app and see changes on the browser, If all good there will be no change in the final output."}),"\n",(0,s.jsx)(n.h3,{id:"adding-delete-functionality-on-client-side",children:"Adding delete functionality on client-side"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="app.tsx" {10}',children:'function ListTodos({ items = [] }: ListTodos) {\n  const [deletedIdxs, setDeletedIdxs] = (React as any).useState([]);\n  return (\n    <>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          const deleted = deletedIdxs.indexOf(index) !== -1;\n          return (\n            <li\n              key={index}\n              className="list-group-item"\n              style={{ color: deleted && "red" }}\n            >\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n                onClick={() => setDeletedIdxs([...deletedIdxs, index])}\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Once you do the above changes and try to delete by clicking on ",(0,s.jsx)(n.strong,{children:"cross-button"}),". You will see no change in UI. By code, it should turn the element ",(0,s.jsx)(n.strong,{children:"color to red"}),". So what could be the reason for that?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Hydrate"]}),"\n",(0,s.jsxs)(n.p,{children:["Since we are using ",(0,s.jsx)(n.code,{children:"ReactDOMServer.renderToString"})," the library which converts ",(0,s.jsx)(n.strong,{children:"React app"})," to string. So we lose all JS capabilities. To re-enable react js on the client-side. For that React provides you Hydrate module(API). This hydrate API re-enable the react feature on the client-side again. This makes our app ",(0,s.jsx)(n.strong,{children:"Isomorphic app"}),". More: ",(0,s.jsx)(n.a,{href:"https://reactjs.org/docs/react-dom.html#hydrate",children:"Hydrate"})]}),"\n",(0,s.jsxs)(n.p,{children:["Adding hydrate is a tough task to do. But Awesome Deno shines well here too. Deno provides Bundle API to convert a script to js. We will use ",(0,s.jsx)(n.code,{children:"Deno.emit"})," to create hydrate js for the client-side."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Create a new file ",(0,s.jsx)(n.code,{children:"client.tsx"})," and add below codes:"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="client.tsx"',children:'import { React, ReactDOM } from "./dep.ts";\n\nimport App from "./app.tsx";\n\n(ReactDOM as any).hydrate(<App todos={[]} />, document.getElementById("root"));\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Add below codes to compile and convert ",(0,s.jsx)(n.code,{children:"client.tsx"})," to serve as a route in our server."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="server.tsx"',children:'\n// initial code\nconst { files } = await Deno.emit("./client.tsx", { bundle: "module" });\nconst clientJS = files["deno:///bundle.js"] || "";\n\nconst serverrouter = new Router();\nserverrouter.get("/static/client.js", (context) => {\n  context.response.headers.set("Content-Type", "text/html");\n  context.response.body = clientJS;\n});\napp.use(router.routes());\napp.use(serverrouter.routes());\n// rest of the code\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={Array.from(todos.values())} /> // change here to pass todos as props\n    );\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n    \x3c!--Rest of the code --\x3e\n    <div id="root">${body}</div>\n    <script  src="http://localhost:8000/static/client.js" defer><\/script>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Since we are using unstable API ",(0,s.jsx)(n.code,{children:"deno.emit"}),", You have to update ",(0,s.jsx)(n.code,{children:"package.json"})," and add more flags. Same time, We are using DOM with typescript. So we have to add custom ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "scripts": {\n    "start": "deno run --allow-net --allow-read --unstable server.tsx -c tsconfig.json",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.json"',children:"{\n  \"compilerOptions\": {\n    \"target\": \"es6\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n    \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n    \"lib\": [\n      \"DOM\",\n      \"ES2017\",\n      \"deno.ns\"\n    ] /* Specify library files to be included in the compilation. */,\n    \"strict\": true /* Enable all strict type-checking options. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n    \"skipLibCheck\": true /* Skip type checking of declaration files. */,\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n  }\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.a,{href:"https://deno.land/manual@v1.13.2/typescript/runtime",children:"runtime compile"})," as CLI to convert ",(0,s.jsx)(n.code,{children:"client.tsx"})," before even starting the server. However, I just wanna show a cool way of doing it. So I use ",(0,s.jsx)(n.code,{children:"Deno.emit"})," on runtime."]})}),"\n",(0,s.jsx)(n.h2,{id:"final-touch",children:"Final Touch"}),"\n",(0,s.jsx)(n.h3,{id:"initialize-initial-state",children:"Initialize initial state"}),"\n",(0,s.jsxs)(n.p,{children:["Once you do all the above-mentioned changes, Re-Run app. You will notice the list is the visible and hidden same time. This is because we react hydrate start working and it is trying to ",(0,s.jsx)(n.em,{children:"re-initialize"})," the app. So all the data we render from the server is gone to persist data we need to pass data as application initial data. There are a lot of patterns to pass initial data. We will use the simple window global data."]}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s start ",(0,s.jsx)(n.strong,{children:"data on the window"})," after making below changes on the given files."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="server.tsx" {4,9-11}',children:'function handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={[]} />\n    );\n    ctx.response.body = `<!DOCTYPE html>\n    <title>Document</title>\n    <script>\n      window.__INITIAL_STATE__ = {"todos": ${JSON.stringify(\n        Array.from(todos.values())\n      )}};\n    <\/script>\n  </head>\n\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="client.tsx"',children:'// initial codes\ndeclare global {\n  var __INITIAL_STATE__: any;\n}\nimport App from "./app.tsx";\nconst { todos } = window.__INITIAL_STATE__ || { todos: [] };\n(ReactDOM as any).hydrate(\n  <App todos={todos} />,\n  document.getElementById("root")\n);\n'})}),"\n",(0,s.jsx)(n.p,{children:"After the changes, all the files will look as below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="app.tsx"',children:'import { React } from "./dep.ts";\ninterface AppProps {\n  todos?: Todo[];\n}\ninterface Todo {\n  task: string;\n}\n\nfunction App({ todos = [] }: AppProps) {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={todos} />\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface ListTodos {\n  items: Todo[];\n}\nfunction ListTodos({ items = [] }: ListTodos) {\n  const [deletedIdxs, setDeletedIdxs] = (React as any).useState([]);\n  return (\n    <div>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          const deleted = deletedIdxs.indexOf(index) !== -1;\n          return (\n            <li\n              key={index}\n              className="list-group-item"\n              style={{ color: deleted ? "red" : "green" }}\n            >\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n                onClick={() => setDeletedIdxs([...deletedIdxs, index])}\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="client.tsx"',children:'import { React, ReactDOM } from "./dep.ts";\n\ndeclare global {\n  var __INITIAL_STATE__: any;\n}\nimport App from "./app.tsx";\nconst { todos } = window.__INITIAL_STATE__ || { todos: [] };\n(ReactDOM as any).hydrate(\n  <App todos={todos} />,\n  document.getElementById("root")\n);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="server.tsx"',children:'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nimport { React, ReactDOMServer } from "./dep.ts";\n\nimport App from "./app.tsx";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\nlet todos: Map<number, any> = new Map();\n\nfunction init() {\n  todos.set(todos.size + 1, { id: Date.now(), task: "build an ssr deno app" });\n  todos.set(todos.size + 1, {\n    id: Date.now(),\n    task: "write blogs on deno ssr",\n  });\n}\ninit();\nrouter\n  .get("/todos", (context: any) => {\n    context.response.body = Array.from(todos.values());\n  })\n  .get("/todos/:id", (context: any) => {\n    if (\n      context.params &&\n      context.params.id &&\n      todos.has(Number(context.params.id))\n    ) {\n      context.response.body = todos.get(Number(context.params.id));\n    } else {\n      context.response.status = 404;\n    }\n  })\n  .post("/todos", async (context: any) => {\n    const body = context.request.body();\n    if (body.type === "json") {\n      const todo = await body.value;\n      todos.set(Date.now(), todo);\n    }\n    context.response.body = { status: "OK" };\n  });\n\nconst { files } = await Deno.emit("./client.tsx", { bundle: "module" });\nconst clientJS = files["deno:///bundle.js"] || "";\n\nconst serverrouter = new Router();\nserverrouter.get("/static/client.js", (context: any) => {\n  context.response.headers.set("Content-Type", "text/html");\n  context.response.body = clientJS;\n});\napp.use(router.routes());\napp.use(serverrouter.routes());\n\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={[]} /> // change here to pass todos as props\n    );\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">\n    <title>Document</title>\n    <script>\n      window.__INITIAL_STATE__ = {"todos": ${JSON.stringify(\n        Array.from(todos.values())\n      )}};\n    <\/script>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n    <script  src="http://localhost:8000/static/client.js" defer><\/script>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "name": "deno-react-ssr",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "start": "deno run --allow-net --allow-read --unstable  server.tsx -c tsconfig.json",\n    "start:clean": "deno run --allow-net --allow-read --unstable --reload server.tsx -c tsconfig.json",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now you have a running, working SSR/Isomorphic App that is fully written in Deno. We didn\u2019t use any nodejs/npm modules or WebPack."}),"\n",(0,s.jsxs)(n.p,{children:["Thanks for reading this tutorial. Please follow me to support me. For more of my work, check-out my website ",(0,s.jsx)(n.a,{href:"https://decipher.dev/",children:"https://decipher.dev/"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can find all the code in ",(0,s.jsx)(n.a,{href:"https://github.com/deepakshrma/deno-by-example/tree/master/examples/ssr",children:"examples/ssr"})," folder on my ",(0,s.jsx)(n.a,{href:"https://github.com/deepakshrma/deno-by-example/",children:"Github repo"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"final-domo",children:"Final Domo"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/todo_demo.gif",alt:"todo gif"})}),"\n",(0,s.jsxs)(n.p,{children:["Hope you like this tutorial, Please follow me and clap for me on medium: ",(0,s.jsx)(n.a,{href:"https://deepak-v.medium.com//build-an-isomorphic-application-using-deno-and-react-without-webpack-deno-by-example-6c748abb3243",children:"isomorphic-application"})]})]})}function p(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>i});var s=t(1504);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);