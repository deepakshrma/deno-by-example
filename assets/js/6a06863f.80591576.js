"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[148],{1996:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>o});var i=s(7624),r=s(2172);const t={id:"advanced-cli-minifind",title:"Build a CLI tool | Deno CLI minifind",sidebar_label:"Build MiniFind CLI",description:"Deno CLI clone of Mac/Unix find",keywords:["advanced","cli","tool","grep","regex"],image:"https://source.unsplash.com/d9ILr-dbEdg/800x450"},a=void 0,d={id:"advanced-cli-minifind",title:"Build a CLI tool | Deno CLI minifind",description:"Deno CLI clone of Mac/Unix find",source:"@site/docs/advanced_create_minifind.md",sourceDirName:".",slug:"/advanced-cli-minifind",permalink:"/deno-by-example/advanced-cli-minifind",draft:!1,unlisted:!1,editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advanced_create_minifind.md",tags:[],version:"current",frontMatter:{id:"advanced-cli-minifind",title:"Build a CLI tool | Deno CLI minifind",sidebar_label:"Build MiniFind CLI",description:"Deno CLI clone of Mac/Unix find",keywords:["advanced","cli","tool","grep","regex"],image:"https://source.unsplash.com/d9ILr-dbEdg/800x450"},sidebar:"someSidebar",previous:{title:"Routing From Scratch",permalink:"/deno-by-example/advanced-routing"},next:{title:"Isomorphic App",permalink:"/deno-by-example/advanced-react-ssr"}},l={},o=[{value:"1. Input command arguments parser",id:"1-input-command-arguments-parser",level:2},{value:"2. Traverse files and directory trees",id:"2-traverse-files-and-directory-trees",level:2},{value:"3. Filter files/directory based on the arguments",id:"3-filter-filesdirectory-based-on-the-arguments",level:3},{value:"4. Logger, better logging information",id:"4-logger-better-logging-information",level:2},{value:"Bonus",id:"bonus",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://source.unsplash.com/d9ILr-dbEdg/800x450",alt:"find"})}),"\n",(0,i.jsxs)(n.p,{children:["We have seen how to create a ",(0,i.jsx)(n.a,{href:"/02-greet-from-cli",children:"Greeting CLI"})," in another tutorial. Now we will extend our knowledge and create a ",(0,i.jsx)(n.code,{children:"full-fledged"})," CLI which will be partially clone of Mac/Unix ",(0,i.jsx)(n.code,{children:"find"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Creating CLI required below mentioned features:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Input command arguments parser"}),"\n",(0,i.jsx)(n.li,{children:"Traverse files and directory trees"}),"\n",(0,i.jsx)(n.li,{children:"Filter files/directory based on the arguments"}),"\n",(0,i.jsx)(n.li,{children:"Logger, better logging information"}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/minifind.png",width:"800"}),"\n",(0,i.jsx)(n.h2,{id:"1-input-command-arguments-parser",children:"1. Input command arguments parser"}),"\n",(0,i.jsxs)(n.p,{children:["Taking arguments in ",(0,i.jsx)(n.code,{children:"Deno"})," is very easy. Every process has ",(0,i.jsx)(n.code,{children:"Deno.args"}),", which returns arguments passed to the program."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts" {4}',children:"async function main(args: string[]) {\n  console.log(args);\n}\nmain(Deno.args);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run examples/minifind.ts param1 param2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'[ "param1", "param2" ]'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Deno.args"})," returns array of the string passed to the program(examples/minifind.ts)."]}),"\n",(0,i.jsxs)(n.p,{children:["Our CLI expects params like ",(0,i.jsx)(n.code,{children:"type"}),", ",(0,i.jsx)(n.code,{children:"name"}),", and ",(0,i.jsx)(n.code,{children:"help"}),". To get the value of these parameters. We need to parse arguments. Deno has ",(0,i.jsx)(n.code,{children:"flags"})," ",(0,i.jsx)(n.a,{href:"https://deno.land/std/flags/mod.ts",children:"module"})," which help to parse and collect parameters. Let's add ",(0,i.jsx)(n.code,{children:"parser"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts" {10}',children:'import { parse } from "https://deno.land/std/flags/mod.ts";\n\nasync function main(args: string[]) {\n  const {\n    type,\n    name,\n    not,\n    help,\n    _: [dir = "."],\n  } = parse(args);\n\n  console.log({\n    type,\n    name,\n    not,\n    help,\n    dir,\n  });\n}\nmain(Deno.args);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'deno run examples/minifind.ts --help --type=f --type=d --name=".*\\.ts" examples\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'{ type: [ "f", "d" ], name: ".*\\.ts", not: undefined, help: true, dir: "examples" }\n'})}),"\n",(0,i.jsx)(n.p,{children:"When you run the program with a given example, You will see the output as above. Deno parse helps you to collect all the arguments."}),"\n",(0,i.jsx)(n.p,{children:"I have used the ES6 de-structuring feature to assign default values."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Deno parse automatically tries to collect and combine params based on patterns. Any argument pass as prefixing ",(0,i.jsx)(n.code,{children:"--"}),", considered as arguments with value. If you don't pass value next to it. It will become boolean."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"example1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(parse(["--test", "t"])); // { _: [], test: "t" }\nconsole.log(parse(["--test"])); // { _: [], test: true }\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Things to be noted: If you pass an argument with the same param more then once. ",(0,i.jsx)(n.code,{children:"parse"})," combine them in ",(0,i.jsx)(n.code,{children:"array"}),". In the above example type is passed twice. That is why, ",(0,i.jsx)(n.code,{children:"type"})," has value ",(0,i.jsx)(n.code,{children:'[ "f", "d" ]'}),"."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"example2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'console.log(parse(["--test", "t", "--test", "t2"])); // { _: [], test: [ "t", "t2" ] }\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["underscore(",(0,i.jsx)(n.code,{children:"_"}),") here is like a collection of rest params. If arguments do not follow the standard ",(0,i.jsx)(n.code,{children:"--"})," or ",(0,i.jsx)(n.code,{children:"-"})," prefix. All arguments collected in ",(0,i.jsx)(n.code,{children:"_"})," as an array of data. We are extracting ",(0,i.jsx)(n.code,{children:"dir"})," as the directory name from rest ",(0,i.jsx)(n.code,{children:"_"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"example3:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const { _ } = parse(["--test", "t", "examples"]);\nconsole.log(_); // _ == [ "examples" ]\nconst [dir = "."] = _;\nconsole.log(dir); // examples\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For more info read:"})," ",(0,i.jsx)(n.a,{href:"https://deno.land/std/flags",children:"https://deno.land/std/flags"})]}),"\n",(0,i.jsx)(n.h2,{id:"2-traverse-files-and-directory-trees",children:"2. Traverse files and directory trees"}),"\n",(0,i.jsx)(n.p,{children:"Since now we have arguments parsed, let's add some logic to read the directory."}),"\n",(0,i.jsxs)(n.p,{children:["The first thing we can do, We can resolve the ",(0,i.jsx)(n.code,{children:"path"})," or ",(0,i.jsx)(n.code,{children:"directory"})," where files need to be searched. We can use the resolve method from ",(0,i.jsx)(n.a,{href:"https://deno.land/std/path",children:"path module"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts"',children:'import { parse } from "https://deno.land/std/flags/mod.ts";\nimport { resolve } from "https://deno.land/std/path/mod.ts";\n\nasync function main(args: string[]) {\n  const {\n    type,\n    name,\n    not,\n    help,\n    _: [dir = "."],\n  } = parse(args);\n  const dirFullPath = resolve(Deno.cwd(), String(dir));\n  console.log(dirFullPath);\n}\nmain(Deno.args);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A examples/minifind.ts examples\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"/Users/xdeepakv/github/deno-by-example/examples"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"resolve"})," require ",(0,i.jsx)(n.code,{children:"--allow-read"})," permission. For the time being, I have given all permission passing flag ",(0,i.jsx)(n.code,{children:"-A"}),". you can read more about ",(0,i.jsx)(n.a,{href:"https://deno.land/manual/getting_started/permissions",children:"permissions"})]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Deno.cwd()"})," is used to get current running path. We had to convert ",(0,i.jsx)(n.code,{children:"dir"})," as a string. Since ",(0,i.jsx)(n.code,{children:"parse"})," can convert it to ",(0,i.jsx)(n.code,{children:"string | number"})," based on the input type."]}),"\n",(0,i.jsxs)(n.p,{children:["Reading a directory can be done using ",(0,i.jsx)(n.code,{children:"Deno.readDir"}),". But we are traversing the entire tree of directories and files. Writing the traverse method can be tricky. You can try by yourself."]}),"\n",(0,i.jsxs)(n.p,{children:["Here, I will take the help of ",(0,i.jsx)(n.code,{children:"walk"})," function from ",(0,i.jsx)(n.a,{href:"https://deno.land/std/fs/mod.ts",children:"https://deno.land/std/fs/mod.ts"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts"',children:'import { parse } from "https://deno.land/std/flags/mod.ts";\nimport { resolve } from "https://deno.land/std/path/mod.ts";\nimport { walk } from "https://deno.land/std/fs/mod.ts";\n\nasync function main(args: string[]) {\n  const {\n    type,\n    name,\n    not,\n    help,\n    _: [dir = "."],\n  } = parse(args);\n  const dirFullPath = resolve(Deno.cwd(), String(dir));\n  for await (let entry of walk(dirFullPath)) {\n    console.log(entry);\n  }\n}\nmain(Deno.args);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A --unstable examples/minifind.ts examples\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'{\n  path: "/Users/xdeepakv/github/deno-by-example/examples/sample_employee.csv",\n  name: "sample_employee.csv",\n  isFile: true,\n  isDirectory: false,\n  isSymlink: false\n}\n{\n  path: "/Users/xdeepakv/github/deno-by-example/examples/06_readfile_chunk.ts",\n  name: "06_readfile_chunk.ts",\n  isFile: true,\n  isDirectory: false,\n  isSymlink: false\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Since ",(0,i.jsx)(n.code,{children:"walk"})," function is not a stable function. We have to use ",(0,i.jsx)(n.code,{children:"--unstable"})," flag while running the example."]})}),"\n",(0,i.jsxs)(n.p,{children:["Walk function returns an async generator of ",(0,i.jsx)(n.code,{children:"entries"}),". Each entries have ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"path"})," along with other flags like ",(0,i.jsx)(n.code,{children:"isDirectory"})," and ",(0,i.jsx)(n.code,{children:"isFile"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Nice: The toughest part has been done. Now we can read entire directories along with files in it."}),"\n",(0,i.jsx)(n.h3,{id:"3-filter-filesdirectory-based-on-the-arguments",children:"3. Filter files/directory based on the arguments"}),"\n",(0,i.jsxs)(n.p,{children:["Walk function accepts ",(0,i.jsx)(n.code,{children:"WalkOptions"})," as the second argument. We can use this option to add our logic."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Interface:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="WalkOptions"',children:"export interface WalkOptions {\n  maxDepth?: number;\n  includeFiles?: boolean;\n  includeDirs?: boolean;\n  followSymlinks?: boolean;\n  exts?: string[];\n  match?: RegExp[];\n  skip?: RegExp[];\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts"',children:'// rest of the code\nasync function main(args: string[]) {\n  // rest of the code\n  const dirFullPath = resolve(Deno.cwd(), String(dir));\n  let includeFiles = true;\n  let includeDirs = true;\n  let types = type ? (Array.isArray(type) ? type : [type]) : ["f", "d"];\n  if (!types.includes("f")) {\n    includeFiles = false;\n  }\n  if (!types.includes("d")) {\n    includeDirs = false;\n  }\n  const options = {\n    maxDepth: 2,\n    includeFiles,\n    includeDirs,\n    followSymlinks: false,\n    skip: [/node_modules/g],\n  };\n  for await (const entry of walk(dirFullPath, options)) {\n    console.log(entry.path);\n  }\n}\nmain(Deno.args);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A --unstable examples/minifind.ts examples\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/Users/xdeepakv/github/deno-by-example/examples\n/Users/xdeepakv/github/deno-by-example/examples/subfolder\n/Users/xdeepakv/github/deno-by-example/examples/subfolder/dummy.ts\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The default type would include both ",(0,i.jsx)(n.code,{children:"file"})," and ",(0,i.jsx)(n.code,{children:"dir"}),' ["f","d"] . Users can pass flag -',(0,i.jsx)(n.code,{children:"-type=f"})," and ",(0,i.jsx)(n.code,{children:"--type=d"})," to override behavior."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run- Dirs only:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A --unstable examples/minifind.ts --type=d examples\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run- Files only:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A --unstable examples/minifind.ts --type=f examples\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"WalkOptions"})," supports regexp to include and exclude patterns. We can use this to filter entries by name."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts" {6-10,16}',children:"/// rest of the code\n\nasync function main(args: string[]) {\n  /// rest of the code\n\n  let matchRegexps: RegExp[] | undefined = name\n    ? (Array.isArray(name) ? name : [name]).map(\n        (reg: string) => new RegExp(reg)\n      )\n    : undefined;\n  const options = {\n    maxDepth: 2,\n    includeFiles,\n    includeDirs,\n    followSymlinks: false,\n    match: matchRegexps,\n    skip: [/node_modules/g],\n  };\n  for await (const entry of walk(dirFullPath, options)) {\n    console.log(entry.path);\n  }\n}\nmain(Deno.args);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run- Get all file name has logger in it:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'deno run -A --unstable examples/minifind.ts --type=f --name=".*logger.*" examples\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now we have working ",(0,i.jsx)(n.code,{children:"minifind"}),". ",(0,i.jsx)(n.strong,{children:"Noice"}),"!"]}),"\n",(0,i.jsx)(n.h2,{id:"4-logger-better-logging-information",children:"4. Logger, better logging information"}),"\n",(0,i.jsxs)(n.p,{children:["The last missing piece is to tell your user about your CLI. For that, we have add helping messages for users. I am using ",(0,i.jsx)(n.code,{children:"logger-util"})," created by me. You can read more here",(0,i.jsx)(n.a,{href:"https://deno.land/x/deno_util",children:"https://deno.land/x/deno_util"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="examples/minifind.ts" {6-10,16}',children:'/// rest of the code\nimport { Logger } from "https://deno.land/x/deno_util/logger.ts";\n\nconst usesFormat = `Uses:\\n\\n  minifind %s`;\nconst logger = new Logger();\n\nfunction printHelp(command: string) {\n  logger.info(`Welcome to minifind [v%s]`, "1.0.0");\n  logger.warn(usesFormat, command);\n}\nasync function main(args: string[]) {\n  /// rest of the code\n\n  if (help) {\n    printHelp(`--type=f --name=".*logger.*" --help examples`);\n    Deno.exit(0);\n  }\n\n  /// rest of the code\n\n  for await (const entry of walk(dirFullPath, options)) {\n    logger.inverse(entry.path);\n  }\n}\nmain(Deno.args);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run with help:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A --unstable examples/minifind.ts --help\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/minifind_1.png",alt:"minifind 1"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run with other options:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run -A --unstable examples/minifind.ts --help\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/minifind_2.png",alt:"minifind 1"})}),"\n",(0,i.jsx)(n.p,{children:"TaDa! \ud83d\udc4f\ud83d\udc4f Now you know how to create a CLI."}),"\n",(0,i.jsx)(n.h2,{id:"bonus",children:"Bonus"}),"\n",(0,i.jsxs)(n.p,{children:["Now we have working ",(0,i.jsx)(n.code,{children:"minifind"})," CLI. However, we had to use ",(0,i.jsx)(n.code,{children:"deno run"})," and ",(0,i.jsx)(n.code,{children:"filename"})," to run the command, which is not intended/feasible. Deno provides ",(0,i.jsx)(n.code,{children:"install"})," command. We can convert any program to an ",(0,i.jsx)(n.code,{children:"executable"})," tool."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's convert our minifind to ",(0,i.jsx)(n.code,{children:"executable"}),". It is very simple."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno install -f --allow-read --unstable examples/minifind.ts\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once you run above command you will see output like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Add /Users/xdeepakv/.deno/bin to PATH\n    export PATH="/Users/xdeepakv/.deno/bin:$PATH"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you see that, Just add ",(0,i.jsx)(n.code,{children:'export PATH="/Users/xdeepakv/.deno/bin:$PATH"'})," this line to you ",(0,i.jsx)(n.code,{children:".bashrc"})," or ",(0,i.jsx)(n.code,{children:".bash_profile"}),"(Depending upon your OS type). Once you add ",(0,i.jsx)(n.code,{children:".deno/bin"})," in PATH. Open a new terminal and try below mention command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'minifind --type=f --name=".*logger.*" examples\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now your minifind is ready to use product. :-)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["I hope you like this tutorial. let me know your feedback in the comment. Please support(\ud83d\ude4f\ud83d\ude4f) by subscribing and clapping on ",(0,i.jsx)(n.a,{href:"https://deepak-v.medium.com/",children:"https://deepak-v.medium.com/"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["All working examples can be found in my Github: ",(0,i.jsx)(n.a,{href:"https://github.com/deepakshrma/deno-by-example/tree/master/examples",children:"https://github.com/deepakshrma/deno-by-example/tree/master/examples"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},2172:(e,n,s)=>{s.d(n,{I:()=>d,M:()=>a});var i=s(1504);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);