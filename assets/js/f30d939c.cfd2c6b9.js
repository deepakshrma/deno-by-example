"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[394],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(n),u=o,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1691:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),s=["components"],i={id:"advanced-react-ssr",title:"Build an Isomorphic Application using Deno and React without WebPack",sidebar_label:"Isomorphic App",description:"Create a SSR/Isomorphic app using Deno without webpack",keywords:["deno","isomorphic","ssr","bundle","advanced","server-side-render"],image:"https://source.unsplash.com/mQHEgroKw2k/800x450"},p=void 0,l={unversionedId:"advanced-react-ssr",id:"advanced-react-ssr",title:"Build an Isomorphic Application using Deno and React without WebPack",description:"Create a SSR/Isomorphic app using Deno without webpack",source:"@site/docs/advanced_react_ssr.md",sourceDirName:".",slug:"/advanced-react-ssr",permalink:"/deno-by-example/advanced-react-ssr",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advanced_react_ssr.md",tags:[],version:"current",frontMatter:{id:"advanced-react-ssr",title:"Build an Isomorphic Application using Deno and React without WebPack",sidebar_label:"Isomorphic App",description:"Create a SSR/Isomorphic app using Deno without webpack",keywords:["deno","isomorphic","ssr","bundle","advanced","server-side-render"],image:"https://source.unsplash.com/mQHEgroKw2k/800x450"},sidebar:"someSidebar",previous:{title:"Build MiniFind CLI",permalink:"/deno-by-example/advanced-cli-minifind"},next:{title:"Lottery Game",permalink:"/deno-by-example/lottery-game"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Set-up",id:"set-up",level:2},{value:"Start with npm init",id:"start-with-npm-init",level:3},{value:"Backend",id:"backend",level:2},{value:"Add React Server Render",id:"add-react-server-render",level:3},{value:"Adding Server Controller- Create Backend APIs",id:"adding-server-controller--create-backend-apis",level:3},{value:"Client Side App",id:"client-side-app",level:2},{value:"Add List Todos to React App",id:"add-list-todos-to-react-app",level:3},{value:"Adding delete functionality on client-side",id:"adding-delete-functionality-on-client-side",level:3},{value:"Final Touch",id:"final-touch",level:2},{value:"Initialize initial state",id:"initialize-initial-state",level:3},{value:"Final Domo",id:"final-domo",level:2}],m={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Currently setting up a ",(0,r.kt)("em",{parentName:"p"},"Server Side Render (SSR)")," application is a pain in ",(0,r.kt)("em",{parentName:"p"},"nodejs"),". There are many scaffolds available for ",(0,r.kt)("em",{parentName:"p"},"nodejs"),". But it comes with its own ",(0,r.kt)("em",{parentName:"p"},"tech-depth")," and ",(0,r.kt)("em",{parentName:"p"},"learning curves"),". This also includes hidden configurations of ",(0,r.kt)("em",{parentName:"p"},"Webpack"),"."),(0,r.kt)("p",null,"All in all, when you give Webpack a chance, your encounter will rarely be a pleasant one."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://memegenerator.net/img/instances/81660209.jpg",alt:"webpack"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Read More"),": ",(0,r.kt)("a",{parentName:"p",href:"https://www.north-47.com/knowledge-base/webpack-the-good-the-bad-and-the-ugly/"},"https://www.north-47.com/knowledge-base/webpack-the-good-the-bad-and-the-ugly/")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"According to the")," ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Isomorphic_JavaScript"},(0,r.kt)("em",{parentName:"a"},"wiki")),(0,r.kt)("em",{parentName:"p"},", An isomorphic JavaScript(also known as")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Universal JavaScript")),(0,r.kt)("em",{parentName:"p"},") is described as JavaScript applications that run both on the client and the server.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.hardwarezone.com/img/2020/07/tenet.jpg",alt:"tenet"})),(0,r.kt)("p",null,"If I say, you can build an entire ",(0,r.kt)("strong",{parentName:"p"},"SSR")," without setting up installing any ",(0,r.kt)("strong",{parentName:"p"},"external nodejs")," dependency. ",(0,r.kt)("strong",{parentName:"p"},"Would you believe it?")," I guess ",(0,r.kt)("inlineCode",{parentName:"p"},"NO"),"."),(0,r.kt)("p",null,"However, In this tutorial, I will explain how to set up a ",(0,r.kt)("em",{parentName:"p"},"simple SSR")," app without installing a ",(0,r.kt)("em",{parentName:"p"},"single nodejs library")," or ",(0,r.kt)("em",{parentName:"p"},"bundler"),". That also including a hydrate react app(",(0,r.kt)("strong",{parentName:"p"},"isomorphic app"),")."),(0,r.kt)("h2",{id:"set-up"},"Set-up"),(0,r.kt)("h3",{id:"start-with-npm-init"},"Start with npm init"),(0,r.kt)("p",null,"Don\u2019t be afraid, To do things differently, we will not install any ",(0,r.kt)("em",{parentName:"p"},"nodejs")," libraries. However, I still like ",(0,r.kt)("em",{parentName:"p"},"npm")," as a task runner. So let\u2019s use it. Create a folder ",(0,r.kt)("em",{parentName:"p"},"SSR")," and init npm ",(0,r.kt)("strong",{parentName:"p"},"package.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"md -p examples/ssr\n\ncd examples/ssr\n\n## init npm package\n\nnpm init --y\n")),(0,r.kt)("h2",{id:"backend"},"Backend"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Add Basic deno server:")," Create ",(0,r.kt)("inlineCode",{parentName:"p"},"server.tsx")," a file and add below code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'},'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction handlePage(ctx: any) {\n  try {\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root"><h1>Hello SSR</h1></div>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n')),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"We will use ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"oak"))," module here to create ",(0,r.kt)("em",{parentName:"p"},"Deno")," server. You can create your own server. For that read my article ",(0,r.kt)("a",{parentName:"p",href:"https://decipher.dev/deno-by-example/advanced-routing"},"Creating Routing/Controller in Deno Server(From Scratch)")))),(0,r.kt)("p",null,"Add below command in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{2}","{2}":!0},'"scripts": {\n    "start": "deno run --allow-net server.ts",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run:"),"\nNow we can run the application and verify on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,r.kt)("h3",{id:"add-react-server-render"},"Add React Server Render"),(0,r.kt)("p",null,"Now we can run the application. Let us add our first rendering code. For that, we need to ReactJS. Since Deno uses ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"},"ES Module import"),", We will use the CDN hosted version of ",(0,r.kt)("strong",{parentName:"p"},"react")," and ",(0,r.kt)("strong",{parentName:"p"},"react-dom"),". For that, there is a good CDN provider ",(0,r.kt)("a",{parentName:"p",href:"https://jspm.dev/"},"https://jspm.dev/"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"jspm")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"jspm"))," ",(0,r.kt)("em",{parentName:"p"},"provides a module CDN allowing any package from")," npm ",(0,r.kt)("em",{parentName:"p"},"to be directly loaded in the the browser and other JS environments as a fully")," optimized ",(0,r.kt)("em",{parentName:"p"},"native JavaScript module.")))),(0,r.kt)("p",null,"Now since we are going to write some ",(0,r.kt)("strong",{parentName:"p"},"TSX syntax(typescript JSX)"),". We have to change the file extension of ",(0,r.kt)("inlineCode",{parentName:"p"},"server.ts")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"server.tsx"),". Let\u2019s do that and update ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mv server.ts server.tsx\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json" {2}',title:'"package.json"',"{2}":!0},'"scripts": {\n    "start": "deno run --allow-net server.tsx",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create a common dependency ",(0,r.kt)("inlineCode",{parentName:"strong"},"deps.ts")," file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="deps.ts" {3,4,17-19,22,31}',title:'"deps.ts"',"{3,4,17-19,22,31}":!0},'// @deno-types="https://denopkg.com/soremwar/deno_types/react/v16.13.1/react.d.ts"\nimport React from "https://jspm.dev/react@17.0.2";\n// @deno-types="https://denopkg.com/soremwar/deno_types/react-dom/v16.13.1/server.d.ts"\nimport ReactDOMServer from "https://jspm.dev/react-dom@17.0.2/server";\n// @deno-types="https://denopkg.com/soremwar/deno_types/react-dom/v16.13.1/react-dom.d.ts"\nimport ReactDOM from "https://jspm.dev/react-dom@17.0.2";\n\nexport { React, ReactDOM, ReactDOMServer };\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Add below lines in ",(0,r.kt)("inlineCode",{parentName:"strong"},"server.tsx"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx" {3,4,17-19,22,31}',title:'"server.tsx"',"{3,4,17-19,22,31}":!0},'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nimport { React, ReactDOMServer, ReactDOM } from "./dep.ts";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction App() {\n  return <h1>Hello SSR</h1>;\n}\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(<App />);\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n')),(0,r.kt)("p",null,"Run the app again. You will see ",(0,r.kt)("strong",{parentName:"p"},"errors")," on the ",(0,r.kt)("strong",{parentName:"p"},"console"),"."),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"TS7026 ","[ERROR]")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"TS7026 ","[","ERROR","]",": JSX element implicitly has type 'any' because no ",(0,r.kt)("strong",{parentName:"p"},"interface 'JSX.IntrinsicElements' exists."),(0,r.kt)("br",{parentName:"p"}),"\n","return ",(0,r.kt)("h1",null,"Hello SSR")))),(0,r.kt)("p",null,"This error is due to missing ",(0,r.kt)("strong",{parentName:"p"},"typings")," to ",(0,r.kt)("strong",{parentName:"p"},"react"),". Since we do not include ",(0,r.kt)("strong",{parentName:"p"},"types")," to react. We have to let know the ",(0,r.kt)("strong",{parentName:"p"},"typescript compiler"),". How it should treat JSX(TSX) syntax."),(0,r.kt)("p",null,"To ",(0,r.kt)("strong",{parentName:"p"},"suppress")," these errors, Add below lines."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx" {3-5}',title:'"server.tsx"',"{3-5}":!0},"function App() {\n  return <h1>Hello SSR</h1>;\n}\n")),(0,r.kt)("p",null,"Now run the server again. You can see your first ",(0,r.kt)("inlineCode",{parentName:"p"},"React SSR")," running on the browser. Nice!"),(0,r.kt)("h3",{id:"adding-server-controller--create-backend-apis"},"Adding Server Controller- Create Backend APIs"),(0,r.kt)("p",null,"Let\u2019s move further and start adding a few core features for Server. Let\u2019s add some ",(0,r.kt)("strong",{parentName:"p"},"server-side")," data for our app. For that, we will include a few routes on ",(0,r.kt)("strong",{parentName:"p"},"Oak Server"),". ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/oakserver/oak"},"Oak")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'},'const router = new Router();\nrouter.get("/", handlePage);\n\nlet todos: Map<number, any> = new Map();\n\nfunction init() {\n  todos.set(todos.size + 1, { id: Date.now(), task: "build an ssr deno app" });\n  todos.set(todos.size + 1, {\n    id: Date.now(),\n    task: "write blogs on deno ssr",\n  });\n}\ninit();\nrouter\n  .get("/todos", (context) => {\n    context.response.body = Array.from(todos.values());\n  })\n  .get("/todos/:id", (context) => {\n    if (\n      context.params &&\n      context.params.id &&\n      todos.has(Number(context.params.id))\n    ) {\n      context.response.body = todos.get(Number(context.params.id));\n    } else {\n      context.response.status = 404;\n    }\n  })\n  .post("/todos", async (context) => {\n    const body = context.request.body();\n    if (body.type === "json") {\n      const todo = await body.value;\n      todos.set(Date.now(), todo);\n    }\n    context.response.body = { status: "OK" };\n  });\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n')),(0,r.kt)("p",null,"Here in the above code, We have created three routes."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"GET ",(0,r.kt)("inlineCode",{parentName:"li"},"/todos/")," to get a list of the todos"),(0,r.kt)("li",{parentName:"ol"},"GET ",(0,r.kt)("inlineCode",{parentName:"li"},"/todos/:id")," to todo by id"),(0,r.kt)("li",{parentName:"ol"},"POST ",(0,r.kt)("inlineCode",{parentName:"li"},"/todos/")," create a new todo")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"function init()")," to create some initial dummy todos. You can use postman to try-out get and post data."),(0,r.kt)("h2",{id:"client-side-app"},"Client Side App"),(0,r.kt)("h3",{id:"add-list-todos-to-react-app"},"Add List Todos to React App"),(0,r.kt)("p",null,"Since now we have API to create todos and consume todos. Let\u2019s list down all this on our react app. For that add the below-mentioned code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'},'function App() {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={Array.from(todos.values())} />\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface Todo {\n  task: string;\n}\ninterface ListTodos{\n  items: Todo[]\n}\nfunction ListTodos({ items = [] }: ListTodos) {\n  return (\n    <div>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          return (\n            <li key={index} className="list-group-item">\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(<App />);\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n  </body>\n  </html>`;\n')),(0,r.kt)("p",null,"Update all the changes and ",(0,r.kt)("em",{parentName:"p"},"run the app"),". You will see a ",(0,r.kt)("em",{parentName:"p"},"list of Todos")," containing two rows of initial data. You can use curl post data to route ",(0,r.kt)("inlineCode",{parentName:"p"},"POST/todos/")," to create new records. Once you add a post, ",(0,r.kt)("em",{parentName:"p"},"refresh")," the page, You will see added new post data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="post data using curl"',title:'"post',data:!0,using:!0,'curl"':!0},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"task":"Create postman script"}\' \\\n  http://localhost:8000/todos/\n')),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"bootstrap")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("em",{parentName:"p"},"If you noticed, I have added basic")," ",(0,r.kt)("a",{parentName:"p",href:"https://getbootstrap.com/"},(0,r.kt)("em",{parentName:"a"},"bootstrap"))," ",(0,r.kt)("em",{parentName:"p"},"to make UI nicer. You can use some other CSS library.")))),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/todo_app_1.png",alt:"todo png"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tada! Now you have running the SSR app. You can replace the ",(0,r.kt)("strong",{parentName:"p"},"in-memory")," todos store to any persistent database. The result will be the same.")),(0,r.kt)("p",null,"Now time to add some ",(0,r.kt)("strong",{parentName:"p"},"interactive")," behavior in Our react app(",(0,r.kt)("inlineCode",{parentName:"p"},"client-side"),"). But before doing that, let\u2019s move our react code to some separate file ",(0,r.kt)("inlineCode",{parentName:"p"},"app.tsx"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create a file ",(0,r.kt)("inlineCode",{parentName:"strong"},"app.tsx"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { React } from "./dep.ts";\n/*\n// enable in case of old react module\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [key: string]: any;\n    }\n  }\n}\n*/\n\ninterface AppProps {\n  todos?: Todo[];\n}\ninterface Todo {\n  task: string;\n}\n\nfunction App({ todos = [] }: AppProps) {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={todos} />\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface ListTodos {\n  items: Todo[];\n}\nfunction ListTodos({ items = [] }: ListTodos) {\n  return (\n    <div>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          return (\n            <li key={index} className="list-group-item">\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\nexport default App;\n')),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Notice the change in the ",(0,r.kt)("em",{parentName:"p"},"App")," component. Since we do not have direct access to ",(0,r.kt)("strong",{parentName:"p"},"todos")," now, We need to pass ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"data as props"))," while rendering it. Corresponding changes have been done for ",(0,r.kt)("strong",{parentName:"p"},"ListTodos"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx" {3,10}',title:'"server.tsx"',"{3,10}":!0},'import { React, ReactDOMServer, ReactDOM } from "./dep.ts";\n\nimport App from "./app.tsx";\n\n/// rest of the code\n\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={Array.from(todos.values())} /> // change here to pass todos as props\n    );\n\n  // rest of the code\n}\n')),(0,r.kt)("p",null,"Run the app and see changes on the browser, If all good there will be no change in the final output."),(0,r.kt)("h3",{id:"adding-delete-functionality-on-client-side"},"Adding delete functionality on client-side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="app.tsx" {10}',title:'"app.tsx"',"{10}":!0},'function ListTodos({ items = [] }: ListTodos) {\n  const [deletedIdxs, setDeletedIdxs] = (React as any).useState([]);\n  return (\n    <>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          const deleted = deletedIdxs.indexOf(index) !== -1;\n          return (\n            <li\n              key={index}\n              className="list-group-item"\n              style={{ color: deleted && "red" }}\n            >\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n                onClick={() => setDeletedIdxs([...deletedIdxs, index])}\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n')),(0,r.kt)("p",null,"Once you do the above changes and try to delete by clicking on ",(0,r.kt)("strong",{parentName:"p"},"cross-button"),". You will see no change in UI. By code, it should turn the element ",(0,r.kt)("strong",{parentName:"p"},"color to red"),". So what could be the reason for that?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Answer:")," Hydrate"),(0,r.kt)("p",null,"Since we are using ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactDOMServer.renderToString")," the library which converts ",(0,r.kt)("strong",{parentName:"p"},"React app")," to string. So we lose all JS capabilities. To re-enable react js on the client-side. For that React provides you Hydrate module(API). This hydrate API re-enable the react feature on the client-side again. This makes our app ",(0,r.kt)("strong",{parentName:"p"},"Isomorphic app"),". More: ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-dom.html#hydrate"},"Hydrate")),(0,r.kt)("p",null,"Adding hydrate is a tough task to do. But Awesome Deno shines well here too. Deno provides Bundle API to convert a script to js. We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.emit")," to create hydrate js for the client-side."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create a new file ",(0,r.kt)("inlineCode",{parentName:"strong"},"client.tsx")," and add below codes:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="client.tsx"',title:'"client.tsx"'},'import { React, ReactDOM } from "./dep.ts";\n\nimport App from "./app.tsx";\n\n(ReactDOM as any).hydrate(<App todos={[]} />, document.getElementById("root"));\n')),(0,r.kt)("p",null,"Add below codes to compile and convert ",(0,r.kt)("inlineCode",{parentName:"p"},"client.tsx")," to serve as a route in our server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'},'\n// initial code\nconst { files } = await Deno.emit("./client.tsx", { bundle: "module" });\nconst clientJS = files["deno:///bundle.js"] || "";\n\nconst serverrouter = new Router();\nserverrouter.get("/static/client.js", (context) => {\n  context.response.headers.set("Content-Type", "text/html");\n  context.response.body = clientJS;\n});\napp.use(router.routes());\napp.use(serverrouter.routes());\n// rest of the code\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={Array.from(todos.values())} /> // change here to pass todos as props\n    );\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n    \x3c!--Rest of the code --\x3e\n    <div id="root">${body}</div>\n    <script  src="http://localhost:8000/static/client.js" defer><\/script>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n')),(0,r.kt)("p",null,"Since we are using unstable API ",(0,r.kt)("inlineCode",{parentName:"p"},"deno.emit"),", You have to update ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," and add more flags. Same time, We are using DOM with typescript. So we have to add custom ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "start": "deno run --allow-net --allow-read --unstable server.tsx -c tsconfig.json",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},"{\n  \"compilerOptions\": {\n    \"target\": \"es6\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n    \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n    \"lib\": [\n      \"DOM\",\n      \"ES2017\",\n      \"deno.ns\"\n    ] /* Specify library files to be included in the compilation. */,\n    \"strict\": true /* Enable all strict type-checking options. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n    \"skipLibCheck\": true /* Skip type checking of declaration files. */,\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/manual@v1.13.2/typescript/runtime"},"runtime compile")," as CLI to convert ",(0,r.kt)("inlineCode",{parentName:"p"},"client.tsx")," before even starting the server. However, I just wanna show a cool way of doing it. So I use ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.emit")," on runtime."))),(0,r.kt)("h2",{id:"final-touch"},"Final Touch"),(0,r.kt)("h3",{id:"initialize-initial-state"},"Initialize initial state"),(0,r.kt)("p",null,"Once you do all the above-mentioned changes, Re-Run app. You will notice the list is the visible and hidden same time. This is because we react hydrate start working and it is trying to ",(0,r.kt)("em",{parentName:"p"},"re-initialize")," the app. So all the data we render from the server is gone to persist data we need to pass data as application initial data. There are a lot of patterns to pass initial data. We will use the simple window global data."),(0,r.kt)("p",null,"Let\u2019s start ",(0,r.kt)("strong",{parentName:"p"},"data on the window")," after making below changes on the given files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.tsx" {4,9-11}',title:'"server.tsx"',"{4,9-11}":!0},'function handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={[]} />\n    );\n    ctx.response.body = `<!DOCTYPE html>\n    <title>Document</title>\n    <script>\n      window.__INITIAL_STATE__ = {"todos": ${JSON.stringify(\n        Array.from(todos.values())\n      )}};\n    <\/script>\n  </head>\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="client.tsx"',title:'"client.tsx"'},'// initial codes\ndeclare global {\n  var __INITIAL_STATE__: any;\n}\nimport App from "./app.tsx";\nconst { todos } = window.__INITIAL_STATE__ || { todos: [] };\n(ReactDOM as any).hydrate(\n  <App todos={todos} />,\n  document.getElementById("root")\n);\n')),(0,r.kt)("p",null,"After the changes, all the files will look as below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { React } from "./dep.ts";\ninterface AppProps {\n  todos?: Todo[];\n}\ninterface Todo {\n  task: string;\n}\n\nfunction App({ todos = [] }: AppProps) {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={todos} />\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface ListTodos {\n  items: Todo[];\n}\nfunction ListTodos({ items = [] }: ListTodos) {\n  const [deletedIdxs, setDeletedIdxs] = (React as any).useState([]);\n  return (\n    <div>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          const deleted = deletedIdxs.indexOf(index) !== -1;\n          return (\n            <li\n              key={index}\n              className="list-group-item"\n              style={{ color: deleted ? "red" : "green" }}\n            >\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n                onClick={() => setDeletedIdxs([...deletedIdxs, index])}\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="client.tsx"',title:'"client.tsx"'},'import { React, ReactDOM } from "./dep.ts";\n\ndeclare global {\n  var __INITIAL_STATE__: any;\n}\nimport App from "./app.tsx";\nconst { todos } = window.__INITIAL_STATE__ || { todos: [] };\n(ReactDOM as any).hydrate(\n  <App todos={todos} />,\n  document.getElementById("root")\n);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="server.tsx"',title:'"server.tsx"'},'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nimport { React, ReactDOMServer } from "./dep.ts";\n\nimport App from "./app.tsx";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\nlet todos: Map<number, any> = new Map();\n\nfunction init() {\n  todos.set(todos.size + 1, { id: Date.now(), task: "build an ssr deno app" });\n  todos.set(todos.size + 1, {\n    id: Date.now(),\n    task: "write blogs on deno ssr",\n  });\n}\ninit();\nrouter\n  .get("/todos", (context: any) => {\n    context.response.body = Array.from(todos.values());\n  })\n  .get("/todos/:id", (context: any) => {\n    if (\n      context.params &&\n      context.params.id &&\n      todos.has(Number(context.params.id))\n    ) {\n      context.response.body = todos.get(Number(context.params.id));\n    } else {\n      context.response.status = 404;\n    }\n  })\n  .post("/todos", async (context: any) => {\n    const body = context.request.body();\n    if (body.type === "json") {\n      const todo = await body.value;\n      todos.set(Date.now(), todo);\n    }\n    context.response.body = { status: "OK" };\n  });\n\nconst { files } = await Deno.emit("./client.tsx", { bundle: "module" });\nconst clientJS = files["deno:///bundle.js"] || "";\n\nconst serverrouter = new Router();\nserverrouter.get("/static/client.js", (context: any) => {\n  context.response.headers.set("Content-Type", "text/html");\n  context.response.body = clientJS;\n});\napp.use(router.routes());\napp.use(serverrouter.routes());\n\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDOMServer.renderToString(\n      <App todos={[]} /> // change here to pass todos as props\n    );\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">\n    <title>Document</title>\n    <script>\n      window.__INITIAL_STATE__ = {"todos": ${JSON.stringify(\n        Array.from(todos.values())\n      )}};\n    <\/script>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n    <script  src="http://localhost:8000/static/client.js" defer><\/script>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "deno-react-ssr",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "start": "deno run --allow-net --allow-read --unstable  server.tsx -c tsconfig.json",\n    "start:clean": "deno run --allow-net --allow-read --unstable --reload server.tsx -c tsconfig.json",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n')),(0,r.kt)("p",null,"Now you have a running, working SSR/Isomorphic App that is fully written in Deno. We didn\u2019t use any nodejs/npm modules or WebPack."),(0,r.kt)("p",null,"Thanks for reading this tutorial. Please follow me to support me. For more of my work, check-out my website ",(0,r.kt)("a",{parentName:"p",href:"https://decipher.dev/"},"https://decipher.dev/"),"."),(0,r.kt)("p",null,"You can find all the code in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepakshrma/deno-by-example/tree/master/examples/ssr"},"examples/ssr")," folder on my ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepakshrma/deno-by-example/"},"Github repo"),"."),(0,r.kt)("h2",{id:"final-domo"},"Final Domo"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/todo_demo.gif",alt:"todo gif"})),(0,r.kt)("p",null,"Hope you like this tutorial, Please follow me and clap for me on medium: ",(0,r.kt)("a",{parentName:"p",href:"https://deepak-v.medium.com//build-an-isomorphic-application-using-deno-and-react-without-webpack-deno-by-example-6c748abb3243"},"isomorphic-application")))}u.isMDXComponent=!0}}]);