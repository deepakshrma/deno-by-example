"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[620],{4432:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var s=r(7624),t=r(2172);const o={id:"01-hello-world",title:"Hello World",description:"Hello World Program, Run your first Deno Server",keywords:["beginner","helloworld","server"],image:"https://source.unsplash.com/iY6QMkP66mI/800x450"},l=void 0,d={id:"01-hello-world",title:"Hello World",description:"Hello World Program, Run your first Deno Server",source:"@site/docs/01_hello_world.md",sourceDirName:".",slug:"/01-hello-world",permalink:"/deno-by-example/01-hello-world",draft:!1,unlisted:!1,editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/01_hello_world.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"01-hello-world",title:"Hello World",description:"Hello World Program, Run your first Deno Server",keywords:["beginner","helloworld","server"],image:"https://source.unsplash.com/iY6QMkP66mI/800x450"},sidebar:"someSidebar",previous:{title:"Greet From CLI",permalink:"/deno-by-example/02-greet-from-cli"},next:{title:"Routing From Scratch",permalink:"/deno-by-example/advanced-routing"}},a={},i=[{value:"Introduction",id:"introduction",level:2},{value:"Import serve from http module",id:"import-serve-from-http-module",level:3},{value:"Create a server instance to listen on port 8080",id:"create-a-server-instance-to-listen-on-port-8080",level:3},{value:"Create request handler",id:"create-request-handler",level:3},{value:"Respond a JSON",id:"respond-a-json",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Deno is design to keeping web in mind. As Deno team mentioned. Deno is to"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide Secure Defaults"}),"\n",(0,s.jsx)(n.li,{children:"Browser compatible"}),"\n",(0,s.jsx)(n.li,{children:"Be able to serve HTTP efficiently"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://source.unsplash.com/iY6QMkP66mI/800x450",alt:"hello"})}),"\n",(0,s.jsxs)(n.p,{children:["Deno provide standard package ",(0,s.jsx)(n.code,{children:"std/http"})," for working with http/https server. This includes an HTTP client and an HTTP server. In this example i will show how simple it is, to create a webserver."]}),"\n",(0,s.jsx)(n.h3,{id:"import-serve-from-http-module",children:"Import serve from http module"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { serve } from "https://deno.land/std/http/server.ts";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"create-a-server-instance-to-listen-on-port-8080",children:"Create a server instance to listen on port 8080"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"{3}",children:'import { serve } from "https://deno.land/std/http/server.ts";\n\nconst server = serve({ port: 8080 });\n'})}),"\n",(0,s.jsx)(n.h3,{id:"create-request-handler",children:"Create request handler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="examples/01_hello_world.ts" {7-9}',children:'import { serve } from "https://deno.land/std/http/server.ts";\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\nconsole.log(`Your server is running on http://localhost:${PORT}/`);\n\nfor await (const req of server) {\n  req.respond({ body: "Hello World\\n" });\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Run App:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"denorun examples/01_hello_world.ts\n\n#OR\n\ndeno run --allow-net --allow-read examples/01_hello_world.ts\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["In my first command i am using ",(0,s.jsx)(n.code,{children:"denorun"}),". It is alias, created for dev environment. If you have't read my get started tutorial, I will recommend you to read it ",(0,s.jsx)(n.a,{href:"/deno-by-example/getting-started",children:"getting-started"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Open browser at ",(0,s.jsx)(n.a,{href:"http://localhost:8080/",children:"http://localhost:8080/"}),". You will see ",(0,s.jsx)(n.code,{children:"hello world"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Breakdown:"})}),"\n",(0,s.jsxs)(n.p,{children:["When you create an instance of serve. It return an ",(0,s.jsx)(n.a,{href:"https://davidwalsh.name/async-generators",children:"async generator"})," server. We can wait forever client to connect using for-await loop. And respond to client using ",(0,s.jsx)(n.code,{children:"req.respond"})," method. ",(0,s.jsx)(n.code,{children:"respond"})," expects ",(0,s.jsx)(n.code,{children:"Response"})," object."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"for await (const req of server)"})}),"\n",(0,s.jsxs)(n.p,{children:["You can read more about async generator ",(0,s.jsx)(n.a,{href:"https://javascript.info/async-iterators-generators",children:"here"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"allow-net",type:"note",children:(0,s.jsxs)(n.p,{children:["As mentioned earlier, Deno is build for security. By default network access is not allowed. You need to pass ",(0,s.jsx)(n.code,{children:"--allow-net"})," as argument."]})}),"\n",(0,s.jsx)(n.h3,{id:"respond-a-json",children:"Respond a JSON"}),"\n",(0,s.jsx)(n.p,{children:"When you respond a request, by default no header is assign to response. You need to set header to response a JSON object. Let's see in example."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="examples/01_hello_world.ts" {6,8-9,11,13,15}',children:'import { serve, Response } from "https://deno.land/std/http/server.ts";\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\nfor await (const req of server) {\n  const response: Response = {}; // Create a Response instance, init with {}\n\n  response.headers = new Headers(); // Create Headers object and assign to response\n  response.headers.set("content-type", "application/json"); // set header as json\n\n  const body = { message: "hello world" }; // Create response body\n\n  response.body = JSON.stringify(body); // Serialize to string bytes.\n\n  req.respond(response); // respond response\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Run App:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"denorun examples/01_hello_world.ts\n\n#OR\n\ndeno run --allow-net --allow-read examples/01_hello_world.ts\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Open browser at ",(0,s.jsx)(n.a,{href:"http://localhost:8080/",children:"http://localhost:8080/"}),". You will see ",(0,s.jsx)(n.code,{children:'{"message":"hello world"}'}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Breakdown:"}),"\nThe Response interface look like as below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export interface Response {\n  status?: number;\n  headers?: Headers;\n  body?: Uint8Array | Reader | string;\n  trailers?: () => Promise<Headers> | Headers;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"body"})," can only accept ",(0,s.jsx)(n.code,{children:"Uint8Array | Reader | string"}),". So we need to serialize the object to jSON string."]}),"\n",(0,s.jsx)(n.admonition,{title:"Read More:",type:"note",children:(0,s.jsxs)(n.p,{children:["You can go to ",(0,s.jsx)(n.a,{href:"https://deno.land/std/http",children:"https://deno.land/std/http"})," to read more about ",(0,s.jsx)(n.code,{children:"http"})," module"]})}),"\n",(0,s.jsx)(n.admonition,{title:"Examples:",type:"info",children:(0,s.jsxs)(n.p,{children:["You can find all example at ",(0,s.jsx)(n.a,{href:"https://github.com/deepakshrma/deno-by-example/blob/master/examples/",children:"https://github.com/deepakshrma/deno-by-example/blob/master/examples/"})]})})]})}function p(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},2172:(e,n,r)=>{r.d(n,{I:()=>d,M:()=>l});var s=r(1504);const t={},o=s.createContext(t);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);