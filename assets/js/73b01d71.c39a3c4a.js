"use strict";(self.webpackChunkdeno_by_example_next=self.webpackChunkdeno_by_example_next||[]).push([[189],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(i,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1123:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={id:"01-hello-world",title:"Hello World",description:"Hello World Program, Run your first Deno Server",keywords:["beginner","helloworld","server"],image:"https://source.unsplash.com/iY6QMkP66mI/800x450"},i=void 0,p={unversionedId:"01-hello-world",id:"01-hello-world",title:"Hello World",description:"Hello World Program, Run your first Deno Server",source:"@site/docs/01_hello_world.md",sourceDirName:".",slug:"/01-hello-world",permalink:"/deno-by-example/01-hello-world",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/01_hello_world.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"01-hello-world",title:"Hello World",description:"Hello World Program, Run your first Deno Server",keywords:["beginner","helloworld","server"],image:"https://source.unsplash.com/iY6QMkP66mI/800x450"},sidebar:"someSidebar",previous:{title:"Greet From CLI",permalink:"/deno-by-example/02-greet-from-cli"},next:{title:"Routing From Scratch",permalink:"/deno-by-example/advanced-routing"}},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Import serve from http module",id:"import-serve-from-http-module",level:3},{value:"Create a server instance to listen on port 8080",id:"create-a-server-instance-to-listen-on-port-8080",level:3},{value:"Create request handler",id:"create-request-handler",level:3},{value:"Respond a JSON",id:"respond-a-json",level:3}],c={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Deno is design to keeping web in mind. As Deno team mentioned. Deno is to"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Provide Secure Defaults"),(0,o.kt)("li",{parentName:"ul"},"Browser compatible"),(0,o.kt)("li",{parentName:"ul"},"Be able to serve HTTP efficiently")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://source.unsplash.com/iY6QMkP66mI/800x450",alt:"hello"})),(0,o.kt)("p",null,"Deno provide standard package ",(0,o.kt)("inlineCode",{parentName:"p"},"std/http")," for working with http/https server. This includes an HTTP client and an HTTP server. In this example i will show how simple it is, to create a webserver."),(0,o.kt)("h3",{id:"import-serve-from-http-module"},"Import serve from http module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { serve } from "https://deno.land/std/http/server.ts";\n')),(0,o.kt)("h3",{id:"create-a-server-instance-to-listen-on-port-8080"},"Create a server instance to listen on port 8080"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{3}","{3}":!0},'import { serve } from "https://deno.land/std/http/server.ts";\n\nconst server = serve({ port: 8080 });\n')),(0,o.kt)("h3",{id:"create-request-handler"},"Create request handler"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="examples/01_hello_world.ts" {7-9}',title:'"examples/01_hello_world.ts"',"{7-9}":!0},'import { serve } from "https://deno.land/std/http/server.ts";\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\nconsole.log(`Your server is running on http://localhost:${PORT}/`);\n\nfor await (const req of server) {\n  req.respond({ body: "Hello World\\n" });\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run App:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"denorun examples/01_hello_world.ts\n\n#OR\n\ndeno run --allow-net --allow-read examples/01_hello_world.ts\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In my first command i am using ",(0,o.kt)("inlineCode",{parentName:"p"},"denorun"),". It is alias, created for dev environment. If you have't read my get started tutorial, I will recommend you to read it ",(0,o.kt)("a",{parentName:"p",href:"/deno-by-example/getting-started"},"getting-started")))),(0,o.kt)("p",null,"Open browser at ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8080/"},"http://localhost:8080/"),". You will see ",(0,o.kt)("inlineCode",{parentName:"p"},"hello world"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Breakdown:")),(0,o.kt)("p",null,"When you create an instance of serve. It return an ",(0,o.kt)("a",{parentName:"p",href:"https://davidwalsh.name/async-generators"},"async generator")," server. We can wait forever client to connect using for-await loop. And respond to client using ",(0,o.kt)("inlineCode",{parentName:"p"},"req.respond")," method. ",(0,o.kt)("inlineCode",{parentName:"p"},"respond")," expects ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," object."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"for await (const req of server)")),(0,o.kt)("p",null,"You can read more about async generator ",(0,o.kt)("a",{parentName:"p",href:"https://javascript.info/async-iterators-generators"},"here"),"."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"allow-net")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As mentioned earlier, Deno is build for security. By default network access is not allowed. You need to pass ",(0,o.kt)("inlineCode",{parentName:"p"},"--allow-net")," as argument."))),(0,o.kt)("h3",{id:"respond-a-json"},"Respond a JSON"),(0,o.kt)("p",null,"When you respond a request, by default no header is assign to response. You need to set header to response a JSON object. Let's see in example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="examples/01_hello_world.ts" {6,8-9,11,13,15}',title:'"examples/01_hello_world.ts"',"{6,8-9,11,13,15}":!0},'import { serve, Response } from "https://deno.land/std/http/server.ts";\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\nfor await (const req of server) {\n  const response: Response = {}; // Create a Response instance, init with {}\n\n  response.headers = new Headers(); // Create Headers object and assign to response\n  response.headers.set("content-type", "application/json"); // set header as json\n\n  const body = { message: "hello world" }; // Create response body\n\n  response.body = JSON.stringify(body); // Serialize to string bytes.\n\n  req.respond(response); // respond response\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run App:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"denorun examples/01_hello_world.ts\n\n#OR\n\ndeno run --allow-net --allow-read examples/01_hello_world.ts\n")),(0,o.kt)("p",null,"Open browser at ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8080/"},"http://localhost:8080/"),". You will see ",(0,o.kt)("inlineCode",{parentName:"p"},'{"message":"hello world"}'),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Breakdown:"),"\nThe Response interface look like as below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Response {\n  status?: number;\n  headers?: Headers;\n  body?: Uint8Array | Reader | string;\n  trailers?: () => Promise<Headers> | Headers;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"body")," can only accept ",(0,o.kt)("inlineCode",{parentName:"p"},"Uint8Array | Reader | string"),". So we need to serialize the object to jSON string."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Read More:")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can go to ",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/std/http"},"https://deno.land/std/http")," to read more about ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," module"))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Examples:")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can find all example at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/deepakshrma/deno-by-example/blob/master/examples/"},"https://github.com/deepakshrma/deno-by-example/blob/master/examples/")))))}u.isMDXComponent=!0}}]);