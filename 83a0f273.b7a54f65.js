(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),s=(n(0),n(93)),o={id:"advanced-graphql",title:"Build a GraphQL Server (From Scratch) | Deno Advanced",sidebar_label:"GraphQL Server",description:"Create a GraphQL Server using deno land(From Scratch)",keywords:["advanced","route","controller","server","graphql"],image:"https://postlight.com/wp-content/uploads/2019/10/Graphql2.png?w=1200"},l={unversionedId:"advanced-graphql",id:"advanced-graphql",isDocsHomePage:!1,title:"Build a GraphQL Server (From Scratch) | Deno Advanced",description:"Create a GraphQL Server using deno land(From Scratch)",source:"@site/docs/advanced_graphql.md",slug:"/advanced-graphql",permalink:"/deno-by-example/advanced-graphql",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advanced_graphql.md",version:"current",sidebar_label:"GraphQL Server",sidebar:"someSidebar",previous:{title:"Run Deno Application on docker | Continuous Integration and Deployment",permalink:"/deno-by-example/advanced-run-on-docker"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Prerequisite",id:"prerequisite",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Basic project directory setup",id:"1-basic-project-directory-setup",children:[]},{value:"2. Velociraptor as script runner",id:"2-velociraptor-as-script-runner",children:[]},{value:"3. Basic server using Oak",id:"3-basic-server-using-oak",children:[]},{value:"4. Basic mock database",id:"4-basic-mock-database",children:[]},{value:"5. Create a /graphql endpoint to handle graphql POST request",id:"5-create-a-graphql-endpoint-to-handle-graphql-post-request",children:[]},{value:"6. Create GraphQL schema and resolver",id:"6-create-graphql-schema-and-resolver",children:[]},{value:"7. Route to handle Query and execute",id:"7-route-to-handle-query-and-execute",children:[]}]},{value:"Limitations",id:"limitations",children:[]},{value:"Source Code",id:"source-code",children:[]}],i={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"introduction"},"Introduction"),Object(s.b)("p",null,"GraphQL is already known for its good things. GraphQL helps to build super scalable APIs. It reduces coupling between code and data provider. Deno is one of the fastest-growing frameworks/languages to build APIs. However, Deno community still new. So there is a very little framework in the Deno community. Some of them are in a very early stage of development."),Object(s.b)("p",null,"In this article, I will explain how you can easily integrate the GraphQL nodejs module with Deno lang. This is a very basic implementation. However, Still, there is a lot of scope for improvements. This is not the end. This is just beginning."),Object(s.b)("h2",{id:"prerequisite"},"Prerequisite"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Deno ",Object(s.b)("a",{parentName:"li",href:"https://deno.land/#installation"},"installed")," on system"),Object(s.b)("li",{parentName:"ul"},"Basic knowledge of Deno ",Object(s.b)("a",{parentName:"li",href:"https://decipher.dev/deno-by-example/01-hello-world"},"read more..")),Object(s.b)("li",{parentName:"ul"},"Basic understanding of routing ",Object(s.b)("a",{parentName:"li",href:"https://decipher.dev/deno-by-example/advanced-routing"},"read more..")),Object(s.b)("li",{parentName:"ul"},"Basic knowledge of GraphQL ",Object(s.b)("a",{parentName:"li",href:"https://deepak-v.medium.com/build-a-scalable-graphql-server-using-typescript-and-apollo-server-4c116ed1425e"},"read more.."))),Object(s.b)("h2",{id:"steps"},"Steps"),Object(s.b)("h3",{id:"1-basic-project-directory-setup"},"1. Basic project directory setup"),Object(s.b)("p",null,"First, create folders and file as described below."),Object(s.b)("p",null,Object(s.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/deno_gql_1.png",alt:"sample 1"})),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},"mkdir  src\nmkdir  src/model src/resolvers src/routes src/schema\ntouch README.md scripts.yaml src/server.ts\n\n## Optional\nmkdir .vscode\ntouch .vscode/settings.json\n")),Object(s.b)("p",null,"Here, ",Object(s.b)("strong",{parentName:"p"},"src")," will be the directory containing all code. ",Object(s.b)("strong",{parentName:"p"},"model")," is to hold all the ",Object(s.b)("em",{parentName:"p"},"database/models"),". We will create all resolvers in ",Object(s.b)("strong",{parentName:"p"},"resolvers")," directory. Similarly, routes and schema to keep routes and schemas respectively. ",Object(s.b)("strong",{parentName:"p"},"src/server.ts")," will be an entry for the server to start with."),Object(s.b)("h3",{id:"2-velociraptor-as-script-runner"},"2. Velociraptor as script runner"),Object(s.b)("p",null,"Deno does not have a task runner like ",Object(s.b)("strong",{parentName:"p"},"npm"),". However, in Deno community, There are lots of modules we can use. I like ",Object(s.b)("a",{parentName:"p",href:"https://deno.land/x/velociraptor@1.0.0-beta.16"},"Velociraptor"),". It is easy to start with an easy to integrate."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},"## You can check the current version.\ndeno install -qA -n vr https://deno.land/x/velociraptor@1.0.0-beta.16/cli.tscl\n")),Object(s.b)("p",null,"Once you install velociraptor using deno, It will be available as executable as ",Object(s.b)("strong",{parentName:"p"},"vr"),". You can try to validate using ",Object(s.b)("inlineCode",{parentName:"p"},"vr --version"),". It will print the current version of the velociraptor."),Object(s.b)("p",null,"Let's add basic scripts in ",Object(s.b)("strong",{parentName:"p"},"src/server.ts")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"allow:\n  - net\n  - read\n  - env\n\nscripts:\n  start:\n    cmd: deno run src/server.ts\n  test: \"echo 'No Test Found'\"\n  build: deno compile --unstable --allow-read --allow-net src/server.ts\n")),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tips")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},Object(s.b)("strong",{parentName:"p"},"velociraptor")," supports JSON, yaml and many more formats. I like yaml version cool so I am using it."))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Explained:")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"allow")," to allow net, read, and env permission to Deno executable"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"scripts")," to add command.")),Object(s.b)("p",null,"Let's add basic ",Object(s.b)("strong",{parentName:"p"},"hello world")," sever in ",Object(s.b)("strong",{parentName:"p"},"server.ts")),Object(s.b)("h3",{id:"3-basic-server-using-oak"},"3. Basic server using ",Object(s.b)("a",{parentName:"h3",href:"https://oakserver.github.io/oak/"},"Oak")),Object(s.b)("p",null,"We are going to use Oak to build our backend server. It is the most stable and community supported module out there."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/server.ts"',title:'"src/server.ts"'},'import { Application } from "https://deno.land/x/oak/mod.ts";\nimport { config } from "https://deno.land/x/dotenv/mod.ts";\nimport { Logger, LoggerOptions } from "https://deno.land/x/deno_util/logger.ts";\n\nconst initialOptions = { level: 0, format: "%s", newLine: true };\nconst logger = new Logger(initialOptions as LoggerOptions);\nconst { PORT = 4000 } = config({ safe: true });\n\nconst app = new Application();\napp.use((cxt) => {\n  cxt.response.body = "Hello GraphQL";\n});\n\nlogger.line(`\ud83d\ude80 Server is running on http://localhost:${PORT}/graphql`);\nawait app.listen({ port: Number(PORT) });\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Run:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},"vr start\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Output:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},"==========================================================\n||      \ud83d\ude80 Server is running on http://localhost:4000/graphql\n==========================================================\n")),Object(s.b)("div",{className:"admonition admonition-info alert alert--info"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"You may get a pop-up to allow network access to Deno when you try to run the server."))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Explained:")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Import oak module to create an Application."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"https://deno.land/x/dotenv@v2.0.0"},"dotevn")," to allow create environmental variable."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"https://deno.land/x/deno_util@v0.0.3"},"deno_util")," to create a basic logger."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"app.use")," to create basic route. Currently, It will respond ",Object(s.b)("strong",{parentName:"li"},"Hello GraphQL")," to every request.")),Object(s.b)("h3",{id:"4-basic-mock-database"},"4. Basic mock database"),Object(s.b)("p",null,"Since the purpose of this tutorial is not to teach you how to bind database and all. So we will mock the database as close as a real app."),Object(s.b)("p",null,"Create a ",Object(s.b)("strong",{parentName:"p"},"database.ts")," file ",Object(s.b)("inlineCode",{parentName:"p"},"touch src/model/database.ts")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/model/database.ts"',title:'"src/model/database.ts"'},'const users = [\n  {\n    _id: "6027d46771b8a91a27bc9e13",\n    index: 0,\n    guid: "b0b80419-58a5-42ac-b488-b7c87a66f9f7",\n    isActive: true,\n    balance: "$3,095.41",\n    picture: "http://placehold.it/32x32",\n    age: 26,\n    name: "Hickman Beach",\n    gender: "male",\n    email: "hickmanbeach@vidto.com",\n    phone: "+1 (980) 401-2407",\n    address: "489 Canda Avenue, Buxton, Tennessee, 252",\n    about: "lorem..",\n    registered: "2020-11-16T10:40:17 -08:00",\n    friends: [\n      {\n        id: 0,\n        name: "Franklin Gentry",\n      },\n    ],\n  },\n];\n\nexport interface Friend {\n  id: number;\n  name: string;\n}\n\nexport interface User {\n  _id: string;\n  index: number;\n  guid: string;\n  isActive: boolean;\n  balance: string;\n  picture: string;\n  age: number;\n  name: string;\n  gender: string;\n  email: string;\n  phone: string;\n  address: string;\n  about: string;\n  registered: string;\n  friends: Friend[];\n}\n\nexport const getUsers = async (predicate?: (user: User) => boolean) => {\n  if (typeof predicate === "function") return users.filter(predicate);\n  return users;\n};\n')),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"You can get the whole file in ",Object(s.b)("a",{parentName:"p",href:"https://github.com/deepakshrma/deno-graphql-starter"},"github repo"),"."))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Explained:")),Object(s.b)("p",null,"A very basic mock database with ",Object(s.b)("strong",{parentName:"p"},"getUsers")," method, which returns users based on a predicate. If there is no predicate, It will return all users else apply a filter using a predicate."),Object(s.b)("h3",{id:"5-create-a-graphql-endpoint-to-handle-graphql-post-request"},"5. Create a /graphql endpoint to handle graphql POST request"),Object(s.b)("p",null,"GraphQL specs support POST to query server. We will use the same. To create a scalable routing. We will create our route in the routes folder and append it in Oak Application using the callback function."),Object(s.b)("p",null,"Create files ",Object(s.b)("inlineCode",{parentName:"p"},"touch src/routes/index.ts src/routes/graphql.ts")),Object(s.b)("p",null,"Let's create gqlrouter"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/routes/graphql.ts"',title:'"src/routes/graphql.ts"'},'import { Router } from "https://deno.land/x/oak/mod.ts";\n\nconst gqlrouter = new Router();\ngqlrouter\n  .get("/graphql", (context) => {\n    context.response.body = "Please use Post to Query";\n  })\n  .post("/graphql", async (context) => {\n    const result = context.request.body();\n    if (result.type === "json") {\n      const { query, variables = {} } = await result.value;\n      if (query) {\n        context.response.body = { query, variables };\n      } else {\n        context.response.body = { message: "Invalid Query" };\n        context.response.status = 400;\n      }\n    }\n  });\n\nexport default gqlrouter;\n')),Object(s.b)("p",null,"Let's update ",Object(s.b)("strong",{parentName:"p"},"index.ts")," to append routes to Server."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/routes/index.ts"',title:'"src/routes/index.ts"'},'import {\n  Application,\n  Middleware,\n  Router,\n} from "https://deno.land/x/oak/mod.ts";\nimport { requestTraceMiddleware } from "https://deno.land/x/oak_middlewares/mod.ts";\nimport gqlrouter from "./graphql.ts";\nconst baseRoute = new Router();\n\nbaseRoute.get("/", (context) => {\n  context.response.body = `<b>Please use <a href="/graphql">/graphql</a> to query</b>`;\n  context.response.headers.append("Content-Type", "text/html; charset=UTF-8");\n});\n\nexport default function init(app: Application) {\n  app.use(\n    requestTraceMiddleware<Middleware>({ type: "combined" })\n  );\n  app.use(baseRoute.routes());\n  app.use(gqlrouter.routes());\n  app.use(gqlrouter.allowedMethods());\n}\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Explained:")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"graphql.ts"),', We have just created an instance of Oak route. It can accept a get request and a post request at endpoint "/graphql".'),Object(s.b)("li",{parentName:"ul"},"All the GraphQL request contains ",Object(s.b)("strong",{parentName:"li"},"query")," and ",Object(s.b)("strong",{parentName:"li"},"variables")," as data payload."),Object(s.b)("li",{parentName:"ul"},"Currently, return ",Object(s.b)("inlineCode",{parentName:"li"},"query and variables")," in return response."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"index.ts")," to combine routes and apply some other middleware to Oak Application.")),Object(s.b)("p",null,"Let's update our ",Object(s.b)("strong",{parentName:"p"},"server.ts")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/server.ts"',title:'"src/server.ts"'},'/// Rest of the code...\nimport init from "./routes/index.ts";\n\nconst app = new Application();\ninit(app);\n\n/// Rest of the code...\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Run:"),"\n",Object(s.b)("inlineCode",{parentName:"p"},"vr run start")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Query using Postman:")),Object(s.b)("p",null,Object(s.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/deno_gql_2.png",alt:"sample 2"})),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Query using CURL:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'http://localhost:4000/graphql\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{"query":"query HelloWorld {\\n    hello {\\n        name\\n    }\\n}","variables":{"name":"Hickman"}}\'\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Output:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "query HelloWorld {\\n    hello {\\n        name\\n    }\\n}",\n  "variables": {\n    "name": "Hickman"\n  }\n}\n')),Object(s.b)("h3",{id:"6-create-graphql-schema-and-resolver"},"6. Create GraphQL schema and resolver"),Object(s.b)("p",null,"GraphQL Executor requires schema and resolver to execute the query. For that, we need to create schema and resolver. Schema can be written in String and compile to code using ",Object(s.b)("strong",{parentName:"p"},"buildSchema")," helper method. Resolvers are basic functions, will be called by graphql executor, and act on the query."),Object(s.b)("p",null,"To use GraphQL Executor we have to install/use ",Object(s.b)("a",{parentName:"p",href:"https://cdn.skypack.dev/graphql"},"graphql module")," from ",Object(s.b)("a",{parentName:"p",href:"https://cdn.skypack.dev/graphql"},"cdn.skypack.dev")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/schema/user.ts"',title:'"src/schema/user.ts"'},"const UserSchema = `\n  type Friends {\n    id: Int\n    name: String\n  }\n\n  type User {\n    _id: String\n    index: Int\n    guid: String\n    isActive: Boolean\n    balance: String\n    picture: String\n    age: Int\n    name: String\n    gender: String\n    email: String\n    phone: String\n    address: String\n    about: String\n    registered: String\n    friends: [Friends]\n  }\n`;\nexport default UserSchema;\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/schema/index.ts"',title:'"src/schema/index.ts"'},'import { buildSchema } from "https://cdn.skypack.dev/graphql";\nimport UserSchema from "./user.ts";\nconst base = `\ntype Query {\n  hello: String\n  users(name: String): [User]\n}\n`;\nexport default buildSchema([base, UserSchema].join("\\n"), {});\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Explained:")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"You can use ",Object(s.b)("a",{parentName:"li",href:"https://transform.tools/json-to-graphql"},"json-to-graphql"),", To generate graphql schema"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"https://graphql.org/graphql-js/"},"buildSchema")," compile and validate schema to generate code in runtime.")),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"Currently, graphql does not support multi-file schema(Query). So we have to write all queries in ",Object(s.b)("strong",{parentName:"p"},"index.ts"),". Hopefully, In future, we can use ",Object(s.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools"},"graphql tools"),"."))),Object(s.b)("p",null,"Let's create resolvers for ",Object(s.b)("strong",{parentName:"p"},"users")," and ",Object(s.b)("strong",{parentName:"p"},"hello")," query"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/resolvers/hello_world.ts"',title:'"src/resolvers/hello_world.ts"'},'const HelloResolver = {\n  Query: {\n    hello: async (_: any, { name }: any = {}, context: any, z: any) => {\n      return "Hello world!";\n    },\n  },\n};\nexport default HelloResolver;\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/resolvers/user.ts"',title:'"src/resolvers/user.ts"'},'import { getUsers } from "../model/database.ts";\n\nconst UserResolver = {\n  Query: {\n    users: async (d: any = {}, context: any) => {\n      return getUsers(d.name ? (u: any) => u.name.includes(d.name) : undefined);\n    },\n  },\n};\nexport default UserResolver;\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/resolvers/index.ts"',title:'"src/resolvers/index.ts"'},'import HelloResolver from "./hello_world.ts";\nimport UserResolver from "./user.ts";\n\nconst resolvers = Object.assign(\n  {},\n  ...[HelloResolver, UserResolver].map((x) => x.Query)\n);\nexport default resolvers;\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Explained:")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"user.ts")," and ",Object(s.b)("strong",{parentName:"li"},"hello.ts")," contains an object with Query in it. The query has the function same name as it is defined in GraphQL Schema."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"index.ts")," accumulate all the resolvers.")),Object(s.b)("h3",{id:"7-route-to-handle-query-and-execute"},"7. Route to handle Query and execute"),Object(s.b)("p",null,"Now we have created schema and resolver function. We can handle GraphQL requests and responses to the query. For that, we need to update our ",Object(s.b)("strong",{parentName:"p"},"src/routes/graphql.ts"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/routes/graphql.ts"  {4,5,15-32}',title:'"src/routes/graphql.ts"',"":!0,"{4,5,15-32}":!0},'import { Router } from "https://deno.land/x/oak/mod.ts";\nimport { graphql } from "https://cdn.skypack.dev/graphql";\nimport schema from "../schema/index.ts";\nimport resolvers from "../resolvers/index.ts";\n\nconst gqlrouter = new Router();\ngqlrouter\n  .get("/graphql", (context) => {\n    context.response.body = "Please use Post to Query";\n  })\n  .post("/graphql", async (context) => {\n    const result = context.request.body();\n    if (result.type === "json") {\n      const { query, variables = {} } = await result.value;\n      if (query) {\n        const data = await (graphql as any)(\n          schema,\n          query,\n          resolvers,\n          {\n            request: context.request,\n            response: context.response,\n          },\n          variables || {}\n        );\n        if (data.errors) {\n          context.response.body = data;\n          context.response.status = 400;\n        } else {\n          context.response.body = data;\n        }\n      } else {\n        context.response.body = { message: "Invalid Query" };\n        context.response.status = 400;\n      }\n    }\n  });\n\nexport default gqlrouter;\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Query using Postman:")),Object(s.b)("p",null,Object(s.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/deno_gql_3.png",alt:"sample 2"})),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Query using CURL:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'http://localhost:4000/graphql\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{"query":"query User($name: String){\\n    users(name: $name) {\\n        name\\n        age\\n    }\\n}","variables":{"name":"Hickman"}}\'\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Output:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "users": [\n      {\n        "name": "Hickman Beach",\n        "age": 26\n      }\n    ]\n  }\n}\n')),Object(s.b)("p",null,"Congrats, Your GraphQL Server is ready to serve(\ud83d\ude80) the request."),Object(s.b)("h2",{id:"limitations"},"Limitations"),Object(s.b)("p",null,"As I mentioned earlier, Deno is still very new and the community is also very new. The above app has a lot of limitations. However, We shouldn't stop exploring it. Some of the limitations are highlighted below."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Support for ",Object(s.b)("a",{parentName:"li",href:"https://graphql.org/learn/queries/#aliases"},"multiple Query/Aliases")),Object(s.b)("li",{parentName:"ul"},"Merge Schema from multiple files"),Object(s.b)("li",{parentName:"ul"},"Conflict in resolvers"),Object(s.b)("li",{parentName:"ul"},"Validations and Proper Error Handling")),Object(s.b)("h2",{id:"source-code"},"Source Code"),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"https://github.com/deepakshrma/deno-graphql-starter"},"deno-graphql-starter")),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"I hope you like this tutorial. let me know your feedback in the comment. Please support(\ud83d\ude4f\ud83d\ude4f) by subscribing and clapping on ",Object(s.b)("a",{parentName:"em",href:"https://deepak-v.medium.com/"},"https://deepak-v.medium.com/"),".")))}p.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),p=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||s;return n?r.a.createElement(m,l(l({ref:t},i),{},{components:n})):r.a.createElement(m,l({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=n[i];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);